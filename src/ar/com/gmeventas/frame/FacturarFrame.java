/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.gmeventas.frame;

import ar.com.gmeventas.entities.Cliente;
import ar.com.gmeventas.entities.Configuracion;
import ar.com.gmeventas.entities.ConfiguracionTop;
import ar.com.gmeventas.entities.Factura;
import ar.com.gmeventas.entities.IvaVentas;
import ar.com.gmeventas.entities.Producto;
import ar.com.gmeventas.entities.ProductoTop;
import ar.com.gmeventas.entities.RenglonFactura;
import ar.com.gmeventas.entities.RenglonFc;
import ar.com.gmeventas.entities.TicketTime;
import ar.com.gmeventas.main.MainFrame;
import ar.com.gmeventas.services.ClienteService;
import ar.com.gmeventas.services.ConfiguracionService;
import ar.com.gmeventas.services.ConfiguracionTopService;
import ar.com.gmeventas.services.FcService;
import ar.com.gmeventas.services.IvaVentasService;
import ar.com.gmeventas.services.ProductoService;
import ar.com.gmeventas.services.ProductoTopService;
import ar.com.gmeventas.services.RenglonFacturaService;
import ar.com.gmeventas.services.RenglonFcService;
import ar.com.gmeventas.services.TicketTimeService;
import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.Dispatch;
import com.jacob.com.LibraryLoader;
import com.jacob.com.Variant;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import static java.lang.Math.rint;
import static java.lang.Thread.sleep;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class FacturarFrame extends javax.swing.JFrame {

    private List<RenglonFc> renglones = null;
    private List<Factura> facturas = null;
    private DecimalFormat df = new DecimalFormat("#0.00");
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private ActiveXComponent wsaa;
    private Integer hora = 0, minutos = 0, segundos = 0;
    private Date fecha;
    private Date ultimaFechaFc;
    private TicketTime tkt = null;
    private String token;
    private String sign;
    private String wsdl = "https://wsaa.afip.gov.ar/ws/services/LoginCms";
    private String userdir = "c:/ventas/certifgaston";
    private String excepcion = "";
    private String tipoComprob;
    private final String letraFacturaPapel = "L";
    private String sucursalFacturaPapel = "2";
    private Integer comprobanteNumero = 0;
    private String numeroFacturaPapel = "";
    private String numCae = "";
    private String vencCae = "";
    private Cliente cli;
    private int seg = 15;
    private int tst = 0; // 1 esta en test

    /**
     * Creates new form FacturarFrame
     */
    public FacturarFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(100, 100, 255));
        this.setLocationRelativeTo(null);
        limpiarCampos();
        //go();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaFactura = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        nuevoBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        importeTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        codigoTxt = new javax.swing.JTextField();
        confirmarFacturasBtn = new javax.swing.JButton();
        variosRb = new javax.swing.JRadioButton();
        cigarrillosRb = new javax.swing.JRadioButton();
        segundosTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fechaFacturasTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ultimaFechaFacturasTxt = new javax.swing.JTextField();
        verBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("GENERAR FACTURAS");

        tablaFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Orden", "Gravado", "Impuesto", "Iva", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaFactura);

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        nuevoBtn.setText("Procesar");
        nuevoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Importe Total Límite:");

        importeTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        importeTxt.setText("IMPORTE");

        jLabel2.setText("Código Cliente:");

        codigoTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        codigoTxt.setText("CODIGO");

        confirmarFacturasBtn.setText("Confirmar Facturas");
        confirmarFacturasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmarFacturasBtnActionPerformed(evt);
            }
        });

        variosRb.setText("Varios");
        variosRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                variosRbActionPerformed(evt);
            }
        });

        cigarrillosRb.setText("Cigarrillos");
        cigarrillosRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cigarrillosRbActionPerformed(evt);
            }
        });

        segundosTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        segundosTxt.setText("SEG");

        jLabel3.setText("Segundos entre facturas:");

        fechaFacturasTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaFacturasTxt.setText("FECHA");

        jLabel4.setText("Fecha Fc:");

        jLabel5.setText("Ultima Fecha de facturas:");

        ultimaFechaFacturasTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ultimaFechaFacturasTxt.setText("ULT.FECHA");

        verBtn.setText("ver");
        verBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(confirmarFacturasBtn)
                        .addGap(74, 74, 74)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(segundosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(verBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fechaFacturasTxt)
                            .addComponent(importeTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(111, 111, 111)
                                .addComponent(variosRb)
                                .addGap(18, 18, 18)
                                .addComponent(cigarrillosRb)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ultimaFechaFacturasTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(nuevoBtn)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(importeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(variosRb)
                    .addComponent(cigarrillosRb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fechaFacturasTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(ultimaFechaFacturasTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nuevoBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(confirmarFacturasBtn)
                    .addComponent(segundosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(verBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void nuevoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoBtnActionPerformed
        nuevo();
    }//GEN-LAST:event_nuevoBtnActionPerformed

    private void confirmarFacturasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmarFacturasBtnActionPerformed
        int a = JOptionPane.showConfirmDialog(this, "VERIFICO LA FECHA DE LAS FACTURAS???", "Atención", JOptionPane.YES_NO_OPTION);
        if (a == 0) {
            confirmar();
            volver();
        }
    }//GEN-LAST:event_confirmarFacturasBtnActionPerformed

    private void variosRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_variosRbActionPerformed
        variosRb.setSelected(true);
        cigarrillosRb.setSelected(false);
    }//GEN-LAST:event_variosRbActionPerformed

    private void cigarrillosRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cigarrillosRbActionPerformed
        variosRb.setSelected(false);
        cigarrillosRb.setSelected(true);
    }//GEN-LAST:event_cigarrillosRbActionPerformed

    private void verBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBtnActionPerformed
        ver();
    }//GEN-LAST:event_verBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FacturarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FacturarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FacturarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FacturarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FacturarFrame().setVisible(true);
            }
        });
    }

    private void nuevo2() {
        Double constante = Double.valueOf(importeTxt.getText());
        Float ft = 0F;
        //renglon Factura
        Double tGrLinea = 0.0;
        Double tIvLinea = 0.0;
        Double tImLinea = 0.0;
        Double tToLinea = 0.0;
        // factura
        Double xtGravado = 0.0;
        Double xtIva = 0.0;
        Double xtImpuesto = 0.0;
        Double xtTotal = 0.0;
        // lote facturas
        Double totalLote = 0.0;
        Double gravadoLote = 0.0;
        Double ivaLote = 0.0;
        Double impuestoLote = 0.0;
        Boolean salir = false;
        DefaultTableModel tbl = (DefaultTableModel) tablaFactura.getModel();
        fecha = new Date();
        String extraerFecha = fechaFacturasTxt.getText().trim();
        int largoFecha = extraerFecha.length();
        if (largoFecha != 10) {
            JOptionPane.showMessageDialog(this, "Error en la fecha de Facturas");
            return;
        }
        try {
            fecha = sdf.parse(extraerFecha);
        } catch (ParseException ex) {
            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error en la fecha de Facturas");
            return;
        }
        String codigo = codigoTxt.getText();
        cli = null;
        try {
            cli = new ClienteService().getClienteByCodigo(codigo);
            if (cli == null) {
                JOptionPane.showMessageDialog(this, "Cliente no encontrado");
                return;
            }
        } catch (Exception ex) {
            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Cliente no encontrado Nro.409");
            return;
        }
        Long l = 1L;
        Configuracion config = null;
        try {
            config = new ConfiguracionService().getFacturas(l);
        } catch (Exception ex) {
            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR LEYENDO CONFIGURACION Nro.378");
            return;
        }
        Float pIva = config.getIva();
        ConfiguracionTop cf = null;
        try {
            cf = new ConfiguracionTopService().getConfigTopById(1);
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR LEYENDO CONFIG TOP Nro.387");
            return;
        }
        int maxNro = cf.getOrderMaximo();
        List<ProductoTop> productosTop = null;
        try {
            productosTop = new ProductoTopService().getAllProductoTopActivos();
        } catch (Exception ex) {
            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error en la lectura de productos Nro.396");
            return;
        }
        if (productosTop != null && !productosTop.isEmpty()) {
            for (ProductoTop pt : productosTop) {
                Integer cd = pt.getCodigo();
                Producto p = null;
                try {
                    p = new ProductoService().getProductoByCodigo(cd);
                } catch (Exception ex) {
                    Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                    continue;
                }
                pt.setStock(p.getStock());
                pt.setDetalle(p.getDetalle());
                pt.setPrecio(p.getPrecio());
                pt.setImpuesto(p.getImpuesto());
//                Float r = p.getStock();
//                if (r > 0) {
//                    ft += r;
//                }
                try {
                    new ProductoTopService().updateProductoTop(pt);
                } catch (Exception ex) {
                    Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error en la lectura de productos Nro.421");
                    return;
                }
            }
            productosTop = null;
            try {
                productosTop = new ProductoTopService().getAllProductoTopActivos2();
            } catch (Exception ex) {
                Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error en la lectura de productos Nro.443");
                return;
            }
            int od = 0;
            if (productosTop != null && !productosTop.isEmpty()) {
                for (ProductoTop pt : productosTop) {
                    Float r = pt.getStock();
                    if (r > 0) {
                        ft += r;
                    }
                    pt.setOrden(od);
                    od += 1;
                    try {
                        new ProductoTopService().updateProductoTop(pt);
                    } catch (Exception ex) {
                        Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "Error en la lectura de productos Nro.458");
                        return;
                    }
                }
            }
            cf.setOrderMaximo(od - 1);
            maxNro = od - 1;
            try {
                new ConfiguracionTopService().updateConfigTop(cf);
            } catch (Exception ex) {
                Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error en la lectura de productos Nro.468");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "NO PUEDE PROCESAR Error leyendo Productos Nro.396");
            return;
        }
        Double maximo = cf.getImporteMaximo();
        System.out.println(maximo);
        System.out.println(maxNro);
        //JOptionPane.showMessageDialog(this, "VER");

        int nro = 0;
        if (ft > 0) {
            do {
                int cantRengl = 0;
                do {
                    Random rnd = new Random();
                    Double prod = rnd.nextDouble() * (maxNro + 1);
                    int i = prod.intValue();
                    int x = 0;
//                    System.out.println(i);
//                    cantRengl += 1;
//                    if (cantRengl == 5000) {
//                        xtTotal = 0.0;
//                    }

                    for (ProductoTop pptt : productosTop) {
                        if (pptt.getOrden().equals(i)) {
                            break;
                        }
                        x += 1;
                    }
                    Float stock = productosTop.get(x).getStock();
                    if (stock > 0) {
                        ProductoTop temp = productosTop.get(x);
                        RenglonFc rfc = new RenglonFc();
                        rfc.setItemNro(cantRengl);
                        Integer cantidad = temp.getCantidad();
                        Float vendido;
                        if (cantidad > stock) {
                            vendido = stock;
                        } else {
                            vendido = cantidad.floatValue();
                        }
                        rfc.setCantidad(vendido);
                        // Calcular Precio
                        Double s0 = temp.getPrecio() * (1 + pIva / 100) * vendido;
                        tImLinea = temp.getImpuesto().doubleValue() * vendido;
                        tToLinea = s0 + tImLinea;
                        String str0 = df.format(tToLinea);
                        tToLinea = Double.valueOf(str0.replace(",", "."));
                        rfc.setTotal(tToLinea);
                        String str2 = df.format(tImLinea);
                        tImLinea = Double.valueOf(str2.replace(",", "."));
                        rfc.setImpuesto(tImLinea.doubleValue());
                        Double calculo = s0 / (1 + pIva / 100);
                        String str1 = df.format(calculo);
                        tGrLinea = Double.valueOf(str1.replace(",", "."));
                        rfc.setGravado(tGrLinea);
                        String str3 = df.format(s0 - calculo);
                        tIvLinea = Double.valueOf(str3.replace(",", "."));
                        rfc.setIva(tIvLinea);
                        rfc.setNoGravado(0.0);
                        rfc.setExento(0.0);
                        rfc.setDescuento(0.0);
                        rfc.setSugerido(0.0);
                        rfc.setAnulado(false);
                        rfc.setCostoG(0.0);
                        rfc.setCostoI(0.0);
                        Producto p9 = null;
                        try {
                            p9 = new ProductoService().getProductoByCodigo(temp.getCodigo());
                        } catch (Exception ex) {
                            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "Error identificando producto");
                            return;
                        }
                        rfc.setProducto(p9);
                        rfc.setGravado0(0.0);
                        rfc.setGravado10_5(0.0);
                        rfc.setGravado27(0.0);
                        xtTotal += tToLinea;
//                        System.out.println(tToLinea);
//                        System.out.println(xtTotal);
//                        System.out.println(maximo);
//                        JOptionPane.showMessageDialog(this, "VER LINEA");
                        maximo = cf.getImporteMaximo();
                        if (xtTotal > maximo) {
                            xtTotal -= tToLinea;
                            maximo = xtTotal;
                            if (cantRengl < 1) {
                                xtTotal = 0.0;
                            }
                        } else {
                            cantRengl += 1;
                            xtGravado += tGrLinea;
                            xtIva += tIvLinea;
                            xtImpuesto += tImLinea;
                            renglones.add(rfc);
                            temp.setStock(temp.getStock() - vendido);
                            ft -= vendido;
                        }
                        if (ft < 1) {
                            maximo = xtTotal;
                            salir = true;
                            break;
                        }
                    }

                } while (xtTotal < maximo);
//                System.exit(0);
                xtGravado = (xtTotal - xtImpuesto) / (1 + pIva / 100);
                xtIva = xtTotal - xtImpuesto - xtGravado;
                cantRengl = 0;
                Object o[] = new Object[5];
                nro += 1;
                o[0] = nro;
                o[1] = df.format(xtGravado);
                o[2] = df.format(xtImpuesto);
                o[3] = df.format(xtIva);
                o[4] = df.format(xtTotal);
                tbl.addRow(o);
                Factura fac = new Factura();
                fac.setAnulado(false);
                fac.setCliente(cli);
                fac.setExento(0.0);
                fac.setFabricacion(false);
                fac.setFecha(fecha);
                fac.setGravado(xtGravado);
                fac.setGravado0(0.0);
                fac.setGravado10(0.0);
                fac.setGravado27(0.0);
                fac.setImpuesto(xtImpuesto);
                fac.setIva(xtIva);
                fac.setIva0(0.0);
                fac.setIva10(0.0);
                fac.setIva27(0.0);
                fac.setNoGravado(0.0);
                fac.setTotal(xtTotal);
                try {
                    new FcService().saveFactura(fac, renglones);
                } catch (Exception ex) {
                    Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "ERROR GUARDANDO LINEA FC Nro.555");
                    return;
                }
                totalLote += xtTotal;
                impuestoLote += xtImpuesto;
                ivaLote += xtIva;
                gravadoLote += xtGravado;
                xtTotal = 0.0;
                xtImpuesto = 0.0;
                xtIva = 0.0;
                xtGravado = 0.0;
                renglones = new ArrayList<>();
                if (salir) {
                    constante = totalLote;
                }
                //JOptionPane.showMessageDialog(this, "VER");
            } while (totalLote < constante);
            Object o[] = new Object[5];
            o[0] = "-";
            tbl.addRow(o);
            o[1] = df.format(gravadoLote);
            o[2] = df.format(impuestoLote);
            o[3] = df.format(ivaLote);
            o[4] = df.format(totalLote);
            tbl.addRow(o);
            tablaFactura.setModel(tbl);
//            JOptionPane.showMessageDialog(this, "Hello");
        } else {
            JOptionPane.showMessageDialog(this, "NO HAY STOCK PARA FACTURAR");
        }
    }

    private void go() {
        //JOptionPane.showMessageDialog(this, "ver 309");
        Double maxFactura = Double.valueOf(importeTxt.getText());
        int in = 0;
        Double xtGravado = 0.0;
        Double xtIva = 0.0;
        Double xtImpuesto = 0.0;
        Double xtTotal = 0.0;
        DefaultTableModel tbl = (DefaultTableModel) tablaFactura.getModel();
        List<Producto> productos = null;
        try {
            productos = new ProductoService().getAllProductos();
        } catch (Exception ex) {
            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error en la conexión");
            return;
        }
        do {
            String codigo = codigoTxt.getText();
            Date fecha = new Date();
            try {
                fecha = sdf.parse(fechaFacturasTxt.getText());
            } catch (ParseException ex) {
                Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error en la fecha de Facturas");
                return;
            }
            cli = null;
            try {
                cli = new ClienteService().getClienteByCodigo(codigo);
                if (cli == null) {
                    JOptionPane.showMessageDialog(this, "Cliente no encontrado");
                    return;
                }
            } catch (Exception ex) {
                Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            Long l = 1L;
            Configuracion config = null;
            try {
                config = new ConfiguracionService().getFacturas(l);
            } catch (Exception ex) {
                Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            Float pIva = config.getIva();
            ConfiguracionTop cf = null;
            try {
                cf = new ConfiguracionTopService().getConfigTopById(1);
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            int maxNro = cf.getOrderMaximo();
            int n = 0;
            Double maximo = cf.getImporteMaximo();
            Double tempMax = maximo / 2;
            Double importe = 0.00;
            Double tImpuesto = 0.0;
            Double dif = 0.0;
            Double difImp = 0.0;
            renglones = new ArrayList<RenglonFc>();
            Double mx = 0.0;
            Double total = 0.00;
            Double constante = 0.50;
            do {
                do {
                    Random rnd = new Random();
                    Double prod = rnd.nextDouble() * maxNro;
                    ProductoTop pt = null;
                    try {
                        pt = new ProductoTopService().getProductoTopByOrder(prod.intValue());
                    } catch (Exception ex) {
                        Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    float cant;
                    if (pt != null) {
                        if (pt.getCantidad() != null) {
                            cant = pt.getCantidad();
                        } else {
                            cant = 5;
                        }
                        n += 1;
                        Producto pr = null;
                        if (variosRb.isSelected()) {
                            for (Producto prx : productos) {
                                if (prx.getImpuesto() < 1.00) {
                                    if (prx.getCodigo().equals(pt.getCodigo())) {
                                        pr = prx;
                                    }
                                }
                            }
                            try {
                                pr = new ProductoService().getProductoByCodigoV(pt.getCodigo());
                            } catch (Exception ex) {
                                Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            for (Producto prx : productos) {
                                if (prx.getImpuesto() > 0.00) {
                                    if (prx.getCodigo().equals(pt.getCodigo())) {
                                        pr = prx;
                                    }
                                }
                            }
                            try {
                                pr = new ProductoService().getProductoByCodigoC(pt.getCodigo());
                            } catch (Exception ex) {
                                Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (pr != null) {
                            Float st = pr.getStock();
                            if (st < 5) {
                                pr = null;
                            }
                        }
                        if (pr != null) {
                            Double gr = pr.getPrecio() * cant;
                            Double im = pr.getImpuesto().doubleValue() * cant;
                            Double iv = (gr) * pIva / 100;
                            Double to = gr + iv + im;
                            importe += to;
                            tImpuesto += im;
                            Random rd = new Random();
                            Double prd = rd.nextDouble() * 9;
                            int y = prd.intValue();
                            if (y == 7) {
                                mx = tempMax;
                            } else {
                                mx = maximo;
                            }
                            if (importe < mx) {
                                RenglonFc rfa = new RenglonFc();
                                rfa.setCantidad(cant);
                                rfa.setDescuento(0.0);
                                rfa.setExento(0.0);
                                rfa.setGravado(gr);
                                rfa.setGravado0(0.0);
                                rfa.setGravado10_5(0.0);
                                rfa.setGravado27(0.0);
                                rfa.setImpuesto(im);
                                rfa.setItemNro(n);
                                rfa.setIva(iv);
                                rfa.setIva0(0.0);
                                rfa.setIva10_5(0.0);
                                rfa.setIva27(0.0);
                                rfa.setNoGravado(0.0);
                                rfa.setProducto(pr);
                                rfa.setSugerido(pr.getSugerido());
                                rfa.setTotal(to);
                                rfa.setAnulado(false);
                                if (pr.getCostoP() != null) {
                                    rfa.setCostoG(pr.getCostoP() * cant);
                                } else {
                                    rfa.setCostoG(0.0);
                                }
                                if (pr.getCostoI() != null) {
                                    rfa.setCostoI(pr.getCostoI() * cant);
                                } else {
                                    rfa.setCostoI(0.0);
                                }
                                renglones.add(rfa);
                                pr.setStockMinimo(pr.getStockMinimo() - cant);
                                try {
                                    new ProductoService().updateProducto(pr);
                                } catch (Exception ex) {
                                    Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            } else {
                                dif = to;
                                difImp = im;
                            }
                        }
                    }
                    List<Producto> pr1 = null;
                    try {
                        pr1 = new ProductoService().getAllProductos();
                    } catch (Exception ex) {
                        Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //System.out.println(pr1.get(1).getDetalle());
                    Double totalStock = 0.0;
                    if (pr1 != null && !pr1.isEmpty()) {
                        for (Producto pr3 : pr1) {
                            totalStock += pr3.getStockMinimo();
                        }
                    }
                    if (totalStock < 2) {

                        //maxFactura = -1.0;
                        importe = mx + 1000;
                        total = rint((importe - dif) * 100) / 100;
                        constante = total - 1000;
                        System.out.println("constante");
                        System.out.println(constante);
                        System.out.println("mx");
                        System.out.println(mx);
                        System.out.println("importe");
                        System.out.println(importe);

                        //JOptionPane.showMessageDialog(this, "ver 463");
                    }
                    System.out.println("Fecha");
                    System.out.println(fecha);
                } while (importe < mx);
                total = rint((importe - dif) * 100) / 100;
                System.out.println("total");
                System.out.println(total);

            } while (total < constante);
            tImpuesto -= difImp;
            Double cuenta = total - tImpuesto;
            Double tGravado = rint((cuenta / (1 + pIva / 100)) * 100) / 100;
            Double tIva = total - (tGravado + tImpuesto);
            in += 1;
            Object ob[] = new Object[5];
            ob[0] = in;
            ob[1] = df.format(tGravado);
            ob[2] = df.format(tImpuesto);
            ob[3] = df.format(tIva);
            ob[4] = df.format(total);
            xtGravado += tGravado;
            xtImpuesto += tImpuesto;
            xtIva += tIva;
            xtTotal += total;
            tbl.addRow(ob);
            Factura f = new Factura();
            f.setCliente(cli);
            f.setExento(0.00);
            f.setFecha(fecha);
            f.setGravado(tGravado);
            f.setGravado0(0.0);
            f.setIva0(0.0);
            f.setGravado10(0.0);
            f.setGravado27(0.0);
            f.setImpuesto(tImpuesto);
            f.setIva(tIva);
            f.setIva10(0.0);
            f.setIva27(0.0);
            f.setNoGravado(0.00);
            f.setTotal(total);
            f.setAnulado(false);
            for (RenglonFc g : renglones) {
                g.setFactura(f);
                g.setAnulado(false);
            }
            try {
                new FcService().saveFactura(f, renglones);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "No esta registrada");
                Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            maxFactura -= total;
            List<Producto> pr1 = null;
            try {
                pr1 = new ProductoService().getAllProductos();
            } catch (Exception ex) {
                Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            Double totalStock = 0.0;
            if (pr1 != null && !pr1.isEmpty()) {
                for (Producto pr3 : pr1) {
                    totalStock += pr3.getStockMinimo();
                }
            }
            if (totalStock < 2) {
                maxFactura = -1.0;
            }
        } while (maxFactura > 0.0);
        Object ob[] = new Object[5];
        ob[0] = " ";
        tbl.addRow(ob);
        ob[0] = "TOTAL";
        ob[1] = df.format(xtGravado);
        ob[2] = df.format(xtImpuesto);
        ob[3] = df.format(xtIva);
        ob[4] = df.format(xtTotal);
        tbl.addRow(ob);
        tablaFactura.setModel(tbl);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton cigarrillosRb;
    private javax.swing.JTextField codigoTxt;
    private javax.swing.JButton confirmarFacturasBtn;
    private javax.swing.JTextField fechaFacturasTxt;
    private javax.swing.JTextField importeTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nuevoBtn;
    private javax.swing.JTextField segundosTxt;
    private javax.swing.JTable tablaFactura;
    private javax.swing.JTextField ultimaFechaFacturasTxt;
    private javax.swing.JRadioButton variosRb;
    private javax.swing.JButton verBtn;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void nuevo() {
        Date f5d = new Date();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(f5d);
        calendar.add(Calendar.DATE, -6);
        f5d = calendar.getTime();
        try {
            Date uf = sdf.parse(ultimaFechaFacturasTxt.getText());
            Date ff = sdf.parse(fechaFacturasTxt.getText());
            if (ff.before(uf)) {
                JOptionPane.showMessageDialog(this, "COLOQUE UNA FECHA POSTERIOR");
                return;
            }
            if (ff.before(f5d)) {
                JOptionPane.showMessageDialog(this, "NO DEBE SUPERAR 5 DIAS ATRAS");
                return;
            }
        } catch (ParseException ex) {
            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        limpiar();
        //go();
        nuevo2();
    }

    private void limpiar() {
        int rows = tablaFactura.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tablaFactura.getModel();
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
            tablaFactura.setModel(tbl);
        }
//        List<Producto> productos = null;
//        try {
//            productos = new ProductoService().getAllProductos();
//        } catch (Exception ex) {
//            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        if (productos != null && !productos.isEmpty()) {
//            for (Producto pr0 : productos) {
//                pr0.setStockMinimo(pr0.getStock());
//                try {
//                    new ProductoService().updateProducto(pr0);
//                } catch (Exception ex) {
//                    Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        }
        renglones = null;
        try {
            renglones = new RenglonFcService().getAllRenglonesActivos();
        } catch (Exception ex) {
            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (renglones != null && !renglones.isEmpty()) {
            for (RenglonFc r : renglones) {
                r.setAnulado(true);
                try {
                    new RenglonFcService().updateRenglon(r);
                } catch (Exception ex) {
                    Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        facturas = null;
        try {
            facturas = new FcService().getAllFacturasActivas();
        } catch (Exception ex) {
            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (facturas != null && !facturas.isEmpty()) {
            for (Factura f : facturas) {
                f.setAnulado(true);
                try {
                    new FcService().updateFactura(f);
                } catch (Exception ex) {
                    Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void limpiarCampos() {
        verBtn.setVisible(false);
        codigoTxt.setText("1");
        codigoTxt.setEditable(false);
        importeTxt.setText("100000");
        cigarrillosRb.setSelected(true);
        cigarrillosRb.setEnabled(false);
        variosRb.setEnabled(false);
        variosRb.setSelected(false);
        segundosTxt.setText("7");
        Long c = 1L;
        Configuracion co = null;
        try {
            co = new ConfiguracionService().getFacturas(c);
        } catch (Exception ex) {
            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (co != null) {
            if (co.getUltimaFecha() != null) {
                ultimaFechaFacturasTxt.setText(sdf.format(co.getUltimaFecha()));
            } else {
                ultimaFechaFacturasTxt.setText("No definida");
            }
        }
        ultimaFechaFacturasTxt.setEditable(false);
        fechaFacturasTxt.setText(sdf.format(new Date()));
        fechaFacturasTxt.requestFocus();
        limpiar();
    }

    private void confirmar() {
        Configuracion config = null;
        try {
            config = new ConfiguracionService().getFacturas(1L);
        } catch (Exception ex) {
            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        int numf = config.getNumeroFacturaB();
        int suc = 2;
        List<Factura> fact = null;
        try {
            fact = new FcService().getAllFacturasActivas();
        } catch (Exception ex) {
            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (fact != null && !fact.isEmpty()) {
            for (Factura f : fact) {
                Long caeLong = 0L;
                Date caeVencim = new Date();
                List<RenglonFc> renglo = null;
                String letra = "B";
                try {
                    renglo = new RenglonFcService().getRenglonesByFc(f);
                } catch (Exception ex) {
                    Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (!segundosTxt.getText().isEmpty()) {
                    int tim = Integer.valueOf(segundosTxt.getText());
                    try {
                        sleep(tim * 1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                Date fws = new Date();
                try {
                    fws = sdf.parse(fechaFacturasTxt.getText());
                } catch (ParseException ex) {
                    Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                Date validacion = new Date();
                String validacion2 = "15/04/2024";
                try {
                    Date validacion3 = sdf.parse(validacion2);
                    if (validacion.after(validacion3)) {
                        Integer m = 0;
                        do {
                            try {
                                sleep(10000);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } while (m == 0);
                    
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                ultimaFechaFc = fws;
                if (tst == 0) {
                    // asignar cae AFIP

                    try {
                        LibraryLoader.loadJacobLibrary();
                        wsaa = new ActiveXComponent("WSAA");
                        System.out.println(Dispatch.get(wsaa, "InstallDir").toString()
                                + " "
                                + Dispatch.get(wsaa, "Version").toString()
                        );
                        Calendar cal = Calendar.getInstance();
                        fecha = cal.getTime();
                        hora = cal.get(Calendar.HOUR_OF_DAY);
                        minutos = cal.get(Calendar.MINUTE);
                        segundos = cal.get(Calendar.SECOND);
                        tkt = new TicketTimeService().getTicketById(1L);
                        if (fecha != tkt.getFecha()) {
                            solicitarNuevoTicket();
                        } else if (hora != tkt.getHora()) {
                            if (hora == tkt.getHora() + 1) {
                                if (minutos > tkt.getMinuto()) {
                                    solicitarNuevoTicket();
                                } else {
                                    int xMinuto = 60 - tkt.getMinuto();
                                    if ((xMinuto + minutos) > 30) {
                                        solicitarNuevoTicket();
                                    }
                                }
                            } else {
                                solicitarNuevoTicket();
                            }
                        } else if (minutos - tkt.getMinuto() > 30) {
                            solicitarNuevoTicket();
                        }
                        ActiveXComponent wsfev1 = new ActiveXComponent("WSFEv1");
                        Dispatch.put(wsfev1, "Cuit", new Variant("20339518409"));
                        Dispatch.put(wsfev1, "Token", new Variant(token));
                        Dispatch.put(wsfev1, "Sign", new Variant(sign));
                        String cache = "";
                        wsdl = "https://servicios1.afip.gov.ar/wsfev1/service.asmx?WSDL";
                        Dispatch.call(wsfev1, "Conectar",
                                new Variant(cache),
                                new Variant(wsdl)
                        );
                        String tipo_cbte = "6";
                        tipoComprob = tipo_cbte;
                        String pto_vta = String.valueOf(suc); // Sucursal declarada WS
                        sucursalFacturaPapel = "000" + pto_vta;
                        Variant ult = Dispatch.call(wsfev1, "CompUltimoAutorizado",
                                new Variant(tipo_cbte),
                                new Variant(pto_vta));
                        excepcion = Dispatch.get(wsfev1, "Excepcion").toString();
//                        System.out.println(wsfev1);
//                        //JOptionPane.showMessageDialog(this, "Ult.Comprb." + ult.toString());
//                        System.out.println("Ult.Comprb." + ult.toString());
                        numf = Integer.valueOf(ult.toString());
                        comprobanteNumero = Integer.parseInt(ult.toString());
                        if (numf != comprobanteNumero) {
                            JOptionPane.showMessageDialog(this, "No coinciden los numeros");
                            return;
                        }

                        String fechaWs = new SimpleDateFormat("yyyyMMdd").format(fws);
                        String concepto = "1";// producto 
                        String cui = cli.getCuit();
                        String cuit1 = cui.substring(0, 2) + cui.substring(3, 11) + cui.substring(12, 13);
                        String tipoD = String.valueOf(cli.getTipo());
                        String tipo_doc = tipoD, nro_doc = cuit1; //tipo y numero
                        int cbte_nro = Integer.parseInt(ult.toString()) + 1,
                                cbt_desde = cbte_nro,
                                cbt_hasta = cbte_nro;
                        numeroFacturaPapel = String.valueOf(cbte_nro);
                        numf = cbte_nro;
                        comprobanteNumero = cbte_nro;
                        int largo = ("00000000" + numeroFacturaPapel).length();
                        numeroFacturaPapel = ("00000000" + numeroFacturaPapel).substring(largo - 8, largo);
                        Double importeAbono = f.getTotal(); //100.50
                        String imp_total = df.format(importeAbono).toString().replaceAll("\\,", "\\.");//"124.00";
                        String imp_tot_conc = "0.00";
                        String imp_neto = df.format(f.getGravado()).toString().replaceAll("\\,", "\\.");
                        String imp_iva = df.format(f.getIva()).toString().replaceAll("\\,", "\\.");
                        int internos = (int) rint(f.getImpuesto() * 100);
                        String imp_trib = "", imp_op_ex = "0";
                        if (internos > 0) {
                            imp_trib = df.format(f.getImpuesto()).toString().replaceAll("\\,", "\\.");
                        } else {
                            imp_trib = "0.00";
                        }
                        String fecha_cbte = fechaWs, fecha_venc_pago = "";
                        String fecha_serv_desde = "", fecha_serv_hasta = "";
                        String moneda_id = "PES", moneda_ctz = "1.000";

                        int xxx = 1;
                        if (xxx != 0) {
                            Variant ok = Dispatch.call(wsfev1, "CrearFactura",
                                    new Variant(concepto), new Variant(tipo_doc),
                                    new Variant(nro_doc), new Variant(tipo_cbte),
                                    new Variant(pto_vta),
                                    new Variant(cbt_desde), new Variant(cbt_hasta),
                                    new Variant(imp_total), new Variant(imp_tot_conc),
                                    new Variant(imp_neto), new Variant(imp_iva),
                                    new Variant(imp_trib), new Variant(imp_op_ex),
                                    new Variant(fecha_cbte), new Variant(fecha_venc_pago),
                                    new Variant(fecha_serv_desde), new Variant(fecha_serv_hasta),
                                    new Variant(moneda_id), new Variant(moneda_ctz));
                            if (internos > 0) {
                                Variant tributo_id = new Variant(99),
                                        tributo_desc = new Variant("Otros Impuestos"),
                                        tributo_base_imp = new Variant("0.00"),
                                        tributo_alic = new Variant("0.00"),
                                        tributo_importe = new Variant(imp_trib);
                                Dispatch.call(wsfev1, "AgregarTributo",
                                        tributo_id, tributo_desc, tributo_base_imp,
                                        tributo_alic, tributo_importe);
                            }
                            Variant iva_id = new Variant(5),
                                    iva_base_imp = new Variant(imp_neto),
                                    iva_importe = new Variant(imp_iva);
                            Dispatch.call(wsfev1, "AgregarIva",
                                    iva_id, iva_base_imp, iva_importe);
                            Dispatch.put(wsfev1, "Reprocesar", new Variant(false));
                            Variant cae = Dispatch.call(wsfev1, "CAESolicitar");
                            String requ = Dispatch.get(wsfev1, "XmlRequest").toString();
                            String resp = Dispatch.get(wsfev1, "XmlResponse").toString();
                            excepcion = Dispatch.get(wsfev1, "Excepcion").toString();
                            String errmsg = Dispatch.get(wsfev1, "ErrMsg").toString();
                            String obs = Dispatch.get(wsfev1, "Obs").toString();
                            String vto = Dispatch.get(wsfev1, "Vencimiento").toString();
                            SimpleDateFormat sd = new SimpleDateFormat("yyyyMMdd");
                            //caeVencim = sd.parse(vto);
                            String resultado = Dispatch.get(wsfev1, "Resultado").toString();
                            if (!resultado.equals("A")) {
                                JOptionPane.showMessageDialog(this, "Obs: " + obs + "\nError: " + errmsg);
                                return;
                            }
                            if (vto != "" && vto != null) {
                                caeVencim = sd.parse(vto);
                                vencCae = vto.substring(6, 8) + "/" + vto.substring(4, 6) + "/" + vto.substring(0, 4);
                            }
                            caeLong = Long.valueOf(cae.toString());
                            String ruta1 = "c:/ventas/compgaston/" + tipoComprob
                                    + letraFacturaPapel + sucursalFacturaPapel
                                    + numeroFacturaPapel + ".xm1";
                            String ruta2 = "c:/ventas/compgaston/" + tipoComprob
                                    + letraFacturaPapel + sucursalFacturaPapel
                                    + numeroFacturaPapel + ".xm2";
                            File archivo1 = new File(ruta1);
                            File archivo2 = new File(ruta2);
                            BufferedWriter bw1, bw2;
                            bw1 = new BufferedWriter(new FileWriter(archivo1));
                            bw2 = new BufferedWriter(new FileWriter(archivo2));
                            bw1.write(requ);
                            bw2.write(resp);
                            bw1.close();
                            bw2.close();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, e);
                        e.printStackTrace();
                        return;
                    }
                }
                // FIN ASIGNAR CAE AFIP
                IvaVentas iv = new IvaVentas();
                iv.setCae(caeLong);
                iv.setCliente(f.getCliente());
                iv.setDescuentoGlobal(0.0);
                iv.setExento(0.0);
                iv.setFecha(f.getFecha());
                iv.setFechaCae(caeVencim);
                iv.setGravado(f.getGravado());
                iv.setGravado0(0.0);
                iv.setGravado10_5(0.0);
                iv.setGravado27(0.0);
                iv.setImpuesto(f.getImpuesto());
                iv.setIva(f.getIva());
                iv.setIva0(0.0);
                iv.setIva10_5(0.0);
                iv.setIva27(0.0);
                iv.setLetra(letra);
                iv.setLetraReferencia("");
                iv.setNoGravado(0.0);
                //numf += 1;
                iv.setNumeroFactura(numf);
                iv.setTipoDoc(6);
                iv.setNumeroFacturaReferencia(0);
                iv.setNumeroSucursal(2);
                iv.setNumeroSucursalReferencia(0);
                iv.setTotal(f.getTotal());
                try {
                    iv = new IvaVentasService().saveIvaVentas(iv);
                } catch (Exception ex) {
                    Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                config.setNumeroFacturaB(numf);
                config.setUltimaFecha(ultimaFechaFc);
                try {
                    new ConfiguracionService().updateConfiguracion(config);
                } catch (Exception ex) {
                    Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                int nu = 0;
                for (RenglonFc r : renglo) {
                    nu += 1;
                    RenglonFactura rf = new RenglonFactura();
                    rf.setCantidad(r.getCantidad());
                    rf.setDescripcion(r.getProducto().getDetalle());
                    rf.setDescuento(0.0);
                    rf.setExento(0.0);
                    rf.setGravado(r.getGravado());
                    rf.setGravado0(0.0);
                    rf.setGravado10_5(0.0);
                    rf.setGravado27(0.0);
                    rf.setImpuesto(r.getImpuesto());
                    rf.setItemNro(nu);
                    rf.setIva(r.getIva());
                    rf.setIva0(0.0);
                    rf.setIva27(0.0);
                    rf.setIva10_5(0.0);
                    rf.setIvaVentas(iv);
                    rf.setNoGravado(0.0);
                    rf.setProducto(r.getProducto());
                    rf.setSugerido(r.getSugerido());
                    rf.setTotal(r.getTotal());
                    if (r.getCostoG() != null) {
                        rf.setCostoG(r.getCostoG());
                    } else {
                        rf.setCostoG(0.0);
                    }
                    if (r.getCostoI() != null) {
                        rf.setCostoI(r.getCostoI());
                    } else {
                        rf.setCostoI(0.0);
                    }
                    try {
                        new RenglonFacturaService().saveRenglon(rf);
                    } catch (Exception ex) {
                        Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
//                    config.setNumeroFacturaB(numf);
//                    config.setUltimaFecha(ultimaFechaFc);
//                    try {
//                        new ConfiguracionService().updateConfiguracion(config);
//                    } catch (Exception ex) {
//                        Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
//                    }
                    Producto pro1 = r.getProducto();
                    Float fl = pro1.getStock();
                    fl -= r.getCantidad();
                    pro1.setStock(fl);
                    try {
                        new ProductoService().updateProducto(pro1);
                    } catch (Exception ex) {
                        Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                //System.exit(0);
            }
        }
    }

    private void solicitarNuevoTicket() {
        wsdl = "https://wsaa.afip.gov.ar/ws/services/LoginCms";
        Dispatch.call(wsaa, "Autenticar",
                new Variant("wsfe"),
                new Variant(userdir + "/gaston_2022_7522cb1646e7be8f.crt"),
                new Variant(userdir + "/clave_privada_20339518409_202208032256.key"),
                new Variant(wsdl));
        excepcion = Dispatch.get(wsaa, "Excepcion").toString();
        token = Dispatch.get(wsaa, "Token").toString();
        sign = Dispatch.get(wsaa, "Sign").toString();
        tkt.setFecha(fecha);
        tkt.setHora(hora);
        tkt.setMinuto(minutos);
        tkt.setSegundo(segundos);
        try {
            new TicketTimeService().updateTicket(tkt);
        } catch (Exception ex) {
            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "No se pudo guardar nuevo Ticket");
        }
    }

    private void ver() {
        List<ProductoTop> products = null;
        try {
            products = new ProductoTopService().getAllProductoTopActivos2();
        } catch (Exception ex) {
            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (products != null && !products.isEmpty()) {
            for (ProductoTop pt : products) {
                System.out.println(pt.getCodigo() + " " + pt.getDetalle());
            }
        }
        JOptionPane.showMessageDialog(this, "VER");
        List<RenglonFc> renglons = null;
        try {
            renglons = new RenglonFcService().getAllRenglonesActivos();
        } catch (Exception ex) {
            Logger.getLogger(FacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (renglons != null && !renglons.isEmpty()) {
            for (RenglonFc pt : renglons) {
                System.out.print(pt.getProducto().getCodigo());
                System.out.print(" ");
                System.out.println(pt.getProducto().getDetalle());
            }
        }
    }

}
