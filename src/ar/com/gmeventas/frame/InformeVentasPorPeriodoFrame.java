/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.gmeventas.frame;

import ar.com.gmeventas.entities.IvaVentas;
import ar.com.gmeventas.entities.RenglonFactura;
import ar.com.gmeventas.main.MainFrame;
import ar.com.gmeventas.services.IvaVentasService;
import ar.com.gmeventas.services.RenglonFacturaService;
import ar.com.gmeventas.util.UtilFrame;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Math.rint;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Mario
 */
public class InformeVentasPorPeriodoFrame extends javax.swing.JFrame {

    private Date de = new Date();
    private Date al = new Date();
    private List<IvaVentas> facturas = null;
    private Double totalFc = 0.0;
    private Double totalImpuesto = 0.0;
    private Double totalGravado0 = 0.0;
    private Double totalGravado10_5 = 0.0;
    private Double totalGravado = 0.0;
    private Double totalGravado27 = 0.0;
    private Double totalIva0 = 0.0;
    private Double totalIva10_5 = 0.0;
    private Double totalIva = 0.0;
    private Double totalIva27 = 0.0;
    private DecimalFormat df = new DecimalFormat("#0.00");
    private DecimalFormat df1 = new DecimalFormat("00000000");
    private DecimalFormat df2 = new DecimalFormat("0000");
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
    private Integer nro;
    private Integer maxNro = 41;
    private String[] renglones = null;
    private String textoFacturaPapel;
    private Date fecha;
    private String fechaFacturaPapel;
    private String clienteFacturaPapel;
    private String codigoClienteFacturaPapel;
    private String direccionFacturaPapel;
    private String cuitFacturaPapel;
    private String condicionVentaFacturaPapel;
    //private String vencimientoFacturaPapel;
    private String inscripcionClienteFacturaPapel;
    private Integer categoriaIva;
    private String nombresColumnaFacturaPapel;
    private String importeTotalFacturaPapel;
    private String lineaTotalesFacturaPapel;
    //private String totalPagarFacturaPapel;
    private String texto1Cae;
    private String letraFacturaPapel;
    private String sucursalFacturaPapel;
    private String numeroFacturaPapel;
    private String tpd;
    private String vencCae;

    /**
     * Creates new form InformeVentasPorPeriodoFrame
     * @param d
     * @param a
     * @param r
     */
    public InformeVentasPorPeriodoFrame(Date d, Date a, Integer r) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(100, 100, 255));
        this.setLocationRelativeTo(null);
        limpiarCampos();
        if (r != null) {
            this.de = d;
            this.al = a;
            this.nro = r;
            deTxt.setText(sdf.format(de));
            alTxt.setText(sdf.format(al));
            buscar();
            Rectangle rect = tabla.getCellRect(nro - 1, 0, true);
            tabla.scrollRectToVisible(rect);
            tabla.clearSelection();
            tabla.setRowSelectionInterval(nro - 1, nro - 1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        deTxt = new javax.swing.JTextField();
        alTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        buscarBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        verCpbteBtn = new javax.swing.JButton();
        excelBtn = new javax.swing.JButton();
        citiBtn = new javax.swing.JButton();
        impreSeleccBtn = new javax.swing.JButton();
        panifRb = new javax.swing.JRadioButton();
        cigarrRb = new javax.swing.JRadioButton();
        todosRb = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("INFORME VENTAS POR PERIODO");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Desde:");

        deTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deTxt.setText("DE");
        deTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deTxtKeyPressed(evt);
            }
        });

        alTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        alTxt.setText("AL");
        alTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                alTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("Hasta:");

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });
        buscarBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                buscarBtnKeyPressed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "NÃºmero", "Grv 0%", "Grv 10.5%", "Grv 21%", "Grv 27%", "Impuesto", "Iva 0%", "Iva 10.5%", "Iva 21%", "Iva 27%", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        verCpbteBtn.setText("Ver Cpbte");
        verCpbteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verCpbteBtnActionPerformed(evt);
            }
        });

        excelBtn.setText("Excel");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        citiBtn.setText("Citi");
        citiBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                citiBtnActionPerformed(evt);
            }
        });

        impreSeleccBtn.setText("Impr.Selecc.");
        impreSeleccBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impreSeleccBtnActionPerformed(evt);
            }
        });

        panifRb.setText("Panif");
        panifRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panifRbActionPerformed(evt);
            }
        });

        cigarrRb.setText("Cigarr");
        cigarrRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cigarrRbActionPerformed(evt);
            }
        });

        todosRb.setText("Todos");
        todosRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                todosRbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buscarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(verCpbteBtn)
                        .addGap(18, 18, 18)
                        .addComponent(excelBtn)
                        .addGap(18, 18, 18)
                        .addComponent(citiBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(impreSeleccBtn)
                        .addGap(18, 18, 18)
                        .addComponent(panifRb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cigarrRb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(todosRb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(jLabel1)
                    .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarBtn)
                    .addComponent(verCpbteBtn)
                    .addComponent(excelBtn)
                    .addComponent(citiBtn)
                    .addComponent(impreSeleccBtn)
                    .addComponent(panifRb)
                    .addComponent(cigarrRb)
                    .addComponent(todosRb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        buscar();
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void verCpbteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verCpbteBtnActionPerformed
        verComprobante();
    }//GEN-LAST:event_verCpbteBtnActionPerformed

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        excel();
    }//GEN-LAST:event_excelBtnActionPerformed

    private void citiBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_citiBtnActionPerformed
        citi();
    }//GEN-LAST:event_citiBtnActionPerformed

    private void impreSeleccBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impreSeleccBtnActionPerformed
        imprime();
    }//GEN-LAST:event_impreSeleccBtnActionPerformed

    private void panifRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panifRbActionPerformed
        panifRb.setSelected(true);
        cigarrRb.setSelected(false);
        todosRb.setSelected(false);
        llenarTabla();
    }//GEN-LAST:event_panifRbActionPerformed

    private void cigarrRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cigarrRbActionPerformed
        panifRb.setSelected(false);
        cigarrRb.setSelected(true);
        todosRb.setSelected(false);
        llenarTabla();
    }//GEN-LAST:event_cigarrRbActionPerformed

    private void todosRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_todosRbActionPerformed
        panifRb.setSelected(false);
        cigarrRb.setSelected(false);
        todosRb.setSelected(true);
        buscar();
    }//GEN-LAST:event_todosRbActionPerformed

    private void deTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = deTxt.getText();
            int largo = fe.length();
            if (largo == 10) {
                alTxt.requestFocus();
            } else {
                if (largo > 10) {
                    JOptionPane.showMessageDialog(this, "ERROR EN LARGO DE FECHA");
                    return;
                }
            }
            fe = UtilFrame.fecha(fe);
            deTxt.setText(fe);
        }
    }//GEN-LAST:event_deTxtKeyPressed

    private void alTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = alTxt.getText();
            int largo = fe.length();
            if (largo == 10) {
                buscarBtn.requestFocus();
            } else {
                if (largo > 10) {
                    JOptionPane.showMessageDialog(this, "ERROR EN LARGO DE FECHA");
                    return;
                }
            }
            fe = UtilFrame.fecha(fe);
            alTxt.setText(fe);
        }
    }//GEN-LAST:event_alTxtKeyPressed

    private void buscarBtnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscarBtnKeyPressed
        if(evt.getKeyCode()==10){
            buscar();
        }
    }//GEN-LAST:event_buscarBtnKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InformeVentasPorPeriodoFrame(null, null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alTxt;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JRadioButton cigarrRb;
    private javax.swing.JButton citiBtn;
    private javax.swing.JTextField deTxt;
    private javax.swing.JButton excelBtn;
    private javax.swing.JButton impreSeleccBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton panifRb;
    private javax.swing.JTable tabla;
    private javax.swing.JRadioButton todosRb;
    private javax.swing.JButton verCpbteBtn;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void limpiarCampos() {
        deTxt.setText("");
        alTxt.setText("");
        todosRb.setSelected(true);
        todosRb.setVisible(false);
        panifRb.setVisible(false);
        cigarrRb.setVisible(false);
        citiBtn.setVisible(false);
        impreSeleccBtn.setVisible(false);
    }

    private void buscar() {
        try {
            de = sdf.parse(deTxt.getText());
            al = sdf.parse(alTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        facturas = null;
        limpiarTabla();
        try {
            facturas = new IvaVentasService().getFacturasEntreFechas(de, al);
        } catch (Exception ex) {
            Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (facturas != null && !facturas.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (IvaVentas fc : facturas) {
                Object o[] = new Object[12];
                o[0] = sdf.format(fc.getFecha());
                o[1] = df1.format(fc.getNumeroFactura());
                if (fc.getGravado0() != null) {
                    o[2] = df.format(fc.getGravado0());
                } else {
                    o[2] = df.format(0);
                }
                if (fc.getGravado10_5() != null) {
                    o[3] = df.format(fc.getGravado10_5());
                } else {
                    o[3] = df.format(0);
                }
                o[4] = df.format(fc.getGravado());
                if (fc.getGravado27() != null) {
                    o[5] = df.format(fc.getGravado27());
                } else {
                    o[5] = df.format(0);
                }
                o[6] = df.format(fc.getImpuesto());
                if (fc.getIva0() != null) {
                    o[7] = df.format(fc.getIva0());
                } else {
                    o[7] = df.format(0);
                }
                if (fc.getIva10_5() != null) {
                    o[8] = df.format(fc.getIva10_5());
                } else {
                    o[8] = df.format(0);
                }
                o[9] = df.format(fc.getIva());
                if (fc.getIva27() != null) {
                    o[10] = df.format(fc.getIva27());
                } else {
                    o[10] = df.format(0);
                }
                o[11] = df.format(fc.getTotal());
                if (fc.getGravado0() != null) {
                    totalGravado0 += fc.getGravado0();
                }
                if (fc.getGravado10_5() != null) {
                    totalGravado10_5 += fc.getGravado10_5();
                }
                totalGravado += fc.getGravado();
                if (fc.getGravado27() != null) {
                    totalGravado27 += fc.getGravado27();
                }
                totalImpuesto += fc.getImpuesto();
                if (fc.getIva0() != null) {
                    totalIva0 += fc.getIva0();
                }
                if (fc.getIva10_5() != null) {
                    totalIva10_5 += fc.getIva10_5();
                }
                totalIva += fc.getIva();
                if (fc.getIva27() != null) {
                    totalIva27 += fc.getIva27();
                }
                totalFc += fc.getTotal();
                tbl.addRow(o);
            }
            Object o[] = new Object[12];
            o[0] = "";
            o[1] = "TOTALES";
            o[2] = df.format(totalGravado0);
            o[3] = df.format(totalGravado10_5);
            o[4] = df.format(totalGravado);
            o[5] = df.format(totalGravado27);
            o[6] = df.format(totalImpuesto);
            o[7] = df.format(totalIva0);
            o[8] = df.format(totalIva10_5);
            o[9] = df.format(totalIva);
            o[10] = df.format(totalIva27);
            o[11] = df.format(totalFc);
            tbl.addRow(o);
            tabla.setModel(tbl);
        }
    }

    private void limpiarTabla() {
        int rows = tabla.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
            tabla.setModel(tbl);
        }
        totalGravado = 0.0;
        totalImpuesto = 0.0;
        totalIva = 0.0;
        totalFc = 0.0;
    }

    private void verComprobante() {
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "SELECCIONE UN COMPROBANTE");
            return;
        }
        IvaVentas i = facturas.get(row);
        VerComprobanteFrame vcf = new VerComprobanteFrame(i, de, al, row);
        vcf.setVisible(true);
        this.dispose();
    }

    private void excel() {
        String fech = sdf2.format(new Date());
        String rutaArchivo = "c:/ventas/informes/iva_ventas_"+fech+".xls";
        File archivo = new File(rutaArchivo);
        if (archivo.exists()) {
            archivo.delete();
        }
        try {
            archivo.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableWorkbook libro = null;
        try {
            libro = Workbook.createWorkbook(archivo);
        } catch (IOException ex) {
            Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableSheet hoja1 = libro.createSheet("IVA Ventas", 0);
        try {
            hoja1.addCell(new jxl.write.Label(0, 0, "SANTORO GASTON MATEO "));
            hoja1.addCell(new jxl.write.Label(0, 1, "FECHA"));
            hoja1.addCell(new jxl.write.Label(1, 1, "TIPO CBTE"));
            hoja1.addCell(new jxl.write.Label(2, 1, "LETRA"));
            hoja1.addCell(new jxl.write.Label(3, 1, "PTO.VENTA"));
            hoja1.addCell(new jxl.write.Label(4, 1, "NUMERO"));
            hoja1.addCell(new jxl.write.Label(5, 1, "CUIT"));
            hoja1.addCell(new jxl.write.Label(6, 1, "RAZON SOCIAL"));
            hoja1.addCell(new jxl.write.Label(7, 1, "CONDICION"));
            hoja1.addCell(new jxl.write.Label(8, 1, "GRAVADO 0%"));
            hoja1.addCell(new jxl.write.Label(9, 1, "GRAVADO 10.5%"));
            hoja1.addCell(new jxl.write.Label(10, 1, "GRAVADO 21%"));
            hoja1.addCell(new jxl.write.Label(11, 1, "GRAVADO 27%"));
            hoja1.addCell(new jxl.write.Label(12, 1, "IVA 0%"));
            hoja1.addCell(new jxl.write.Label(13, 1, "IVA 10.5%"));
            hoja1.addCell(new jxl.write.Label(14, 1, "IVA 21%"));
            hoja1.addCell(new jxl.write.Label(15, 1, "IVA 27%"));
            hoja1.addCell(new jxl.write.Label(16, 1, "IMPUESTO"));
            hoja1.addCell(new jxl.write.Label(17, 1, "TOTAL"));
            hoja1.addCell(new jxl.write.Label(18, 1, "VTO.CAE"));
            hoja1.addCell(new jxl.write.Label(19, 1, "CAE"));
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            int y = 2;
            Double tg0 = 0.0;
            Double tg10 = 0.0;
            Double tg21 = 0.0;
            Double tg27 = 0.0;
            Double ti = 0.0;
            Double tv0 = 0.0;
            Double tv10 = 0.0;
            Double tv21 = 0.0;
            Double tv27 = 0.0;
            Double tt = 0.0;
            //int rows = tabla.getRowCount();
            for (IvaVentas i : facturas) {
                tg21 += i.getGravado();
                if (i.getGravado0() != null) {
                    tg0 += i.getGravado0();
                }
                if (i.getGravado10_5() != null) {
                    tg10 += i.getGravado10_5();
                }
                if (i.getGravado27() != null) {
                    tg27 += i.getGravado27();
                }
                ti += i.getImpuesto();
                tv21 += i.getIva();
                if (i.getIva0() != null) {
                    tv0 += i.getIva0();
                }
                if (i.getIva10_5() != null) {
                    tv10 += i.getIva10_5();
                }
                if (i.getIva27() != null) {
                    tv27 += i.getIva27();
                }
                tt += i.getTotal();
                hoja1.addCell(new jxl.write.Label(0, y, sdf.format(i.getFecha())));
                if (i.getLetra().equals("A")) {
                    hoja1.addCell(new jxl.write.Label(1, y, "1"));
                } else {
                    hoja1.addCell(new jxl.write.Label(1, y, "6"));
                }
                hoja1.addCell(new jxl.write.Label(2, y, i.getLetra()));
                hoja1.addCell(new jxl.write.Label(3, y, df2.format(i.getNumeroSucursal())));
                hoja1.addCell(new jxl.write.Label(4, y, df1.format(i.getNumeroFactura())));
                hoja1.addCell(new jxl.write.Label(5, y, i.getCliente().getCuit()));
                hoja1.addCell(new jxl.write.Label(6, y, i.getCliente().getRazonSocial()));
                String condicion = "";
                switch (i.getCliente().getCategoriaDeIva()) {
                    case 1:
                        condicion = "INSCRIPTO";
                        break;
                    case 2:
                        condicion = "MONOTRIBUTO";
                        break;
                    case 3:
                        condicion = "EXENTO";
                        break;
                    case 4:
                        condicion = "CONS.FINAL";
                        break;
                }
                hoja1.addCell(new jxl.write.Label(7, y, condicion));
                if (i.getGravado0() != null) {
                    hoja1.addCell(new jxl.write.Number(8, y, i.getGravado0()));
                } else {
                    hoja1.addCell(new jxl.write.Number(8, y, 0.00));
                }
                if (i.getGravado10_5() != null) {
                    hoja1.addCell(new jxl.write.Number(9, y, i.getGravado10_5()));
                } else {
                    hoja1.addCell(new jxl.write.Number(9, y, 0.00));
                }
                if (i.getGravado() != null) {
                    hoja1.addCell(new jxl.write.Number(10, y, i.getGravado()));
                } else {
                    hoja1.addCell(new jxl.write.Number(10, y, 0.00));
                }
                if (i.getGravado27() != null) {
                    hoja1.addCell(new jxl.write.Number(11, y, i.getGravado27()));
                } else {
                    hoja1.addCell(new jxl.write.Number(11, y, 0.00));
                }
                if (i.getIva0() != null) {
                    hoja1.addCell(new jxl.write.Number(12, y, i.getIva0()));
                } else {
                    hoja1.addCell(new jxl.write.Number(12, y, 0.00));
                }
                if (i.getIva10_5() != null) {
                    hoja1.addCell(new jxl.write.Number(13, y, i.getIva10_5()));
                } else {
                    hoja1.addCell(new jxl.write.Number(13, y, 0.00));
                }
                if (i.getIva() != null) {
                    hoja1.addCell(new jxl.write.Number(14, y, i.getIva()));
                } else {
                    hoja1.addCell(new jxl.write.Number(14, y, 0.0));
                }
                if (i.getIva0() != null) {
                    hoja1.addCell(new jxl.write.Number(15, y, i.getIva27()));
                } else {
                    hoja1.addCell(new jxl.write.Number(15, y, 0.00));
                }
                hoja1.addCell(new jxl.write.Number(16, y, i.getImpuesto()));
                hoja1.addCell(new jxl.write.Number(17, y, i.getTotal()));
                hoja1.addCell(new jxl.write.Label(18, y, sdf.format(i.getFechaCae())));
                hoja1.addCell(new jxl.write.Label(19, y, i.getCae().toString()));
                y += 1;
            }
            hoja1.addCell(new jxl.write.Label(1, y + 1, "TOTALES"));
            hoja1.addCell(new jxl.write.Number(8, y + 1, tg0));
            hoja1.addCell(new jxl.write.Number(9, y + 1, tg10));
            hoja1.addCell(new jxl.write.Number(10, y + 1, tg21));
            hoja1.addCell(new jxl.write.Number(11, y + 1, tg27));
            hoja1.addCell(new jxl.write.Number(12, y + 1, tv0));
            hoja1.addCell(new jxl.write.Number(13, y + 1, tv10));
            hoja1.addCell(new jxl.write.Number(14, y + 1, tv21));
            hoja1.addCell(new jxl.write.Number(15, y + 1, tv27));
            hoja1.addCell(new jxl.write.Number(16, y + 1, ti));
            hoja1.addCell(new jxl.write.Number(17, y + 1, tt));
        } catch (WriteException ex) {
            Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error configurando Excel");
        }
        try {
            libro.write();
            libro.close();
        } catch (IOException ex) {
            Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 387");
        } catch (WriteException ex) {
            Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 388");
        }
        JOptionPane.showMessageDialog(this, "Excel creado correctamente");
        JOptionPane.showMessageDialog(this, "LO ENCUENTRA EN C:/VENTAS/INFORMES/IVA_VENTAS");
    }

    private void citi() {
        DecimalFormat df2 = new DecimalFormat("00");
        DecimalFormat df3 = new DecimalFormat("000");
        DecimalFormat df4 = new DecimalFormat("0000");
        DecimalFormat df5 = new DecimalFormat("00000");
        DecimalFormat df15 = new DecimalFormat("000000000000000");
        DecimalFormat df20 = new DecimalFormat("00000000000000000000");
        String ruta1 = "c:/informes/comprobantes.txt";
        String ruta2 = "c:/informes/alicuotas.txt";
        File archivo1 = new File(ruta1);
        File archivo2 = new File(ruta2);
        BufferedWriter bw1 = null, bw2 = null;
        try {
            bw1 = new BufferedWriter(new FileWriter(archivo1));
            bw2 = new BufferedWriter(new FileWriter(archivo2));
        } catch (IOException ex) {
            Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (IvaVentas fc : facturas) {
            String linea = "";
            String cui = fc.getCliente().getCuit().substring(0, 2);
            cui += fc.getCliente().getCuit().substring(3, 11);
            cui += fc.getCliente().getCuit().substring(12, 13);
            Long ncui = Long.valueOf(cui);
            String espacio30 = "                              ";
            //                 "123456789012345678901234567890"
            Double it0 = fc.getTotal() * 100;
            Long it1 = it0.longValue();
            Double im0 = fc.getImpuesto() * 100;
            Long im1 = im0.longValue();
            String rs = fc.getCliente().getRazonSocial() + espacio30;
            rs = rs.substring(0, 30);
            Double gr = fc.getGravado() * 100;
            if (fc.getGravado0() != null) {
                gr += fc.getGravado0();
            }
            if (fc.getGravado10_5() != null) {
                gr += fc.getGravado10_5();
            }
            if (fc.getGravado27() != null) {
                gr += fc.getGravado27();
            }
            Long gr1 = gr.longValue();
            Double iv = fc.getIva() * 100;
            if (fc.getIva0() != null) {
                iv += fc.getIva0();
            }
            if (fc.getIva10_5() != null) {
                iv += fc.getIva10_5();
            }
            if (fc.getIva27() != null) {
                iv += fc.getIva27();
            }
            Long iv1 = iv.longValue();
            linea += sdf2.format(fc.getFecha());
//            System.out.println(fc);
//            System.out.println(fc.getTipoDoc());
            if (fc.getTipoDoc() != null) {
                linea += df3.format(fc.getTipoDoc().intValue());
            } else {
                linea += df3.format(0);
            }
            linea += df5.format(fc.getNumeroSucursal());
            linea += df20.format(fc.getNumeroFactura());
            linea += df20.format(fc.getNumeroFactura());
            linea += fc.getCliente().getTipo();
            linea += df20.format(ncui);
            linea += rs;
            linea += df15.format(it1);
            linea += df15.format(0);
            linea += df15.format(0);
            linea += df15.format(0);
            linea += df15.format(0);
            linea += df15.format(0);
            linea += df15.format(0);
            linea += df15.format(0);
            linea += "PES0001000000";
            int c_al = 0;
            if (fc.getGravado() > 0.00) {
                c_al += 1;
            }
            if (fc.getGravado10_5() != null) {
                if (fc.getGravado10_5() > 0.0) {
                    c_al += 1;
                }
            }
            if (fc.getGravado0() != null) {
                if (fc.getGravado0() > 0.0) {
                    c_al += 1;
                }
            }
            if (fc.getGravado27() != null) {
                if (fc.getGravado27() > 0.0) {
                    c_al += 1;
                }
            }
            String c_ali = String.valueOf(c_al);
            linea += c_ali;
// va cant alic
            linea += "0";
            linea += df15.format(im1);
            linea += sdf2.format(fc.getFecha());
            linea += "\r";
            String linea1 = "";
//            System.out.println(fc);
//            System.out.println(fc.getTipoDoc());

            //linea1 += df3.format(fc.getTipoDoc());
            if (fc.getGravado() > 0.00) {
                if (fc.getTipoDoc() != null) {
                    linea1 += df3.format(fc.getTipoDoc().intValue());
                } else {
                    linea1 += df3.format(0);
                }
                linea1 += df5.format(fc.getNumeroSucursal());
                linea1 += df20.format(fc.getNumeroFactura());
                linea1 += df15.format(fc.getGravado() * 100);
                linea1 += df4.format(5);
                linea1 += df15.format(fc.getIva() * 100);
                linea1 += "\r";
            }
            String linea2 = "";
            if (fc.getGravado10_5() != null) {
                if (fc.getGravado10_5() > 0.0) {
                    if (fc.getTipoDoc() != null) {
                        linea2 += df3.format(fc.getTipoDoc().intValue());
                    } else {
                        linea2 += df3.format(0);
                    }
                    linea2 += df5.format(fc.getNumeroSucursal());
                    linea2 += df20.format(fc.getNumeroFactura());
                    linea2 += df15.format(fc.getGravado10_5() * 100);
                    linea2 += df4.format(4);
                    linea2 += df15.format(fc.getIva10_5() * 100);
                    linea2 += "\r";
                }
            }
            String linea3 = "";
            if (fc.getGravado0() != null) {
                if (fc.getGravado0() > 0.0) {
                    if (fc.getTipoDoc() != null) {
                        linea3 += df3.format(fc.getTipoDoc().intValue());
                    } else {
                        linea3 += df3.format(0);
                    }
                    linea3 += df5.format(fc.getNumeroSucursal());
                    linea3 += df20.format(fc.getNumeroFactura());
                    linea3 += df15.format(fc.getGravado0() * 100);
                    linea3 += df4.format(3);
                    linea3 += df15.format(fc.getIva0() * 100);
                    linea3 += "\r";
                }
            }
            String linea4 = "";
            if (fc.getGravado27() != null) {
                if (fc.getGravado27() > 0.0) {
                    if (fc.getTipoDoc() != null) {
                        linea4 += df3.format(fc.getTipoDoc().intValue());
                    } else {
                        linea4 += df3.format(0);
                    }
                    linea4 += df5.format(fc.getNumeroSucursal());
                    linea4 += df20.format(fc.getNumeroFactura());
                    linea4 += df15.format(fc.getGravado27() * 100);
                    linea4 += df4.format(6);
                    linea4 += df15.format(fc.getIva27() * 100);
                    linea4 += "\r";
                }
            }
            try {
                bw1.write(linea);
                if (fc.getGravado() > 0.00) {
                    bw2.write(linea1);
                }
                if (fc.getGravado10_5() != null) {
                    if (fc.getGravado10_5() > 0.00) {
                        bw2.write(linea2);
                    }
                }
                if (fc.getGravado0() != null) {
                    if (fc.getGravado0() > 0.00) {
                        bw2.write(linea3);
                    }
                }
                if (fc.getGravado27() != null) {
                    if (fc.getGravado27() > 0.00) {
                        bw2.write(linea4);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            bw1.close();
            bw2.close();
        } catch (IOException ex) {
            Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(this, "Archivo CITI creado");
    }

    private void imprime() {
        int rows = tabla.getRowCount();
        if (rows > 0) {
            //int imprimio = 0;
            for (int i = 0; i < rows; i++) {
                if (tabla.isRowSelected(i)) {
                    IvaVentas iv = facturas.get(i);
                    List<RenglonFactura> renglones = null;
                    try {
                        renglones = new RenglonFacturaService().getAllRenglonFacturaFromIvaVentas(iv);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "ERROR EN FC: " + iv.getNumeroFactura().toString());
                        return;
                    }
                    generarFactura(iv, renglones);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "NO HAY COMPROBANTES PARA IMPRIMIR");
        }
    }

    private void generarFactura(IvaVentas i, List<RenglonFactura> r) {
        renglones = new String[maxNro];
        textoFacturaPapel = "FACTURA";
        fechaFacturaPapel = sdf.format(i.getFecha());
        fecha = i.getFecha();
        clienteFacturaPapel = i.getCliente().getRazonSocial();
        codigoClienteFacturaPapel = i.getCliente().getDomicilio().getNumero();
        direccionFacturaPapel = i.getCliente().getDomicilio().getCalle()
                + " " + i.getCliente().getDomicilio().getNumero()
                + " - " + i.getCliente().getDomicilio().getLocalidad();
        cuitFacturaPapel = i.getCliente().getCuit();
        String condVta = "";
        Date fechaVto = fecha;
        Calendar cal = new GregorianCalendar();
        cal.setTime(fecha);
        if (i.getCliente().getFormaDePago().equals(1)) {
            condVta = "CONTADO               ";
        }
        if (i.getCliente().getFormaDePago().equals(2)) {
            condVta = "7 DIAS F.F            ";
            cal.add(Calendar.DATE, 7);
            fechaVto = cal.getTime();
        }
        if (i.getCliente().getFormaDePago().equals(3)) {
            condVta = "14 DIAS F.F.          ";
            cal.add(Calendar.DATE, 14);
            fechaVto = cal.getTime();
        }
        if (i.getCliente().getFormaDePago().equals(4)) {
            condVta = "OTRO                  ";
            fechaVto = null;
        }
        condicionVentaFacturaPapel = condVta;
        //vencimientoFacturaPapel = sdf.format(fechaVto);
        String catego = "";
        if (i.getCliente().getCategoriaDeIva().equals(1)) {
            catego = "Responsable Inscripto       ";
        }
        if (i.getCliente().getCategoriaDeIva().equals(2)) {
            catego = "Monotributo                 ";
        }
        if (i.getCliente().getCategoriaDeIva().equals(3)) {
            catego = "Exento                      ";
        }
        if (i.getCliente().getCategoriaDeIva().equals(4)) {
            catego = "Consumidor Final            ";
        }
        inscripcionClienteFacturaPapel = catego;
        categoriaIva = i.getCliente().getCategoriaDeIva();
        if (categoriaIva != 1) {
            //                                    1         2         3         4         5         6         7         8         9        10
            //                           1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
            nombresColumnaFacturaPapel = "  IT CANT                   DETALLE                     P.UNIT.          TOTAL           SUG";
        } else {
            nombresColumnaFacturaPapel = "  IT CANT                   DETALLE                    P.UNIT.   GRAVADO      IVA       IMP.     TOTAL     SUG";
            //mbresColumnaFacturaPapel = "  IT CANT                   DETALLE                     P.UNIT.     DESC.    GRAVADO      IVA       IMP.    TOTAL      SUG";
        }
        DecimalFormat df = new DecimalFormat("#0.00");
        int maxTabla = r.size();
        for (int re = 0; re < maxNro; re++) {
            if (re < maxTabla) {
                //nro item
                String str0 = String.valueOf(re + 1);
                int largo = str0.length();
                if (largo < 2) {
                    renglones[re] = " " + str0 + " ";
                } else {
                    renglones[re] = str0 + " ";
                }
                // cantidad
                str0 = r.get(re).getCantidad().toString();
                largo = str0.length();
                if (largo == 1) {
                    renglones[re] = renglones[re] + "   " + str0;
                }
                if (largo == 2) {
                    renglones[re] = renglones[re] + "  " + str0;
                }
                if (largo == 3) {
                    renglones[re] = renglones[re] + " " + str0;
                }
                if (largo == 4) {
                    renglones[re] = renglones[re] + str0;
                }
                // detalle
                str0 = r.get(re).getDescripcion();
                String espacio = " ";
                largo = str0.length();
                if (largo > 42) {
                    str0 = str0.substring(0, 42);
                } else {
                    for (int l = largo; l < 42; l++) {
                        espacio += " ";
                    }
                }
                renglones[re] = renglones[re] + "  " + r.get(re).getDescripcion() + espacio;
                sucursalFacturaPapel = df2.format(i.getNumeroSucursal());
                numeroFacturaPapel = df1.format(i.getNumeroFactura());
                if (categoriaIva != 1) {
                    letraFacturaPapel = "B";
//                  aqui detalle de importes no inscripto en IVA           *****
// Precio Unitario
                    Double pu = r.get(re).getTotal() / r.get(re).getCantidad();
                    str0 = df.format(pu).replace(",", ".");
                    Double doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[re] = renglones[re] + espacio + df.format(doble) + "      ";
// Descuento
//                    str0 = tablaFactura.getValueAt(r, 7).toString();
//                    str0 = str0.replace(",", ".");
//                    doble = Double.valueOf(str0);
//                    largo = doble.intValue();
//                    espacio = "     ";
//                    largo = String.valueOf(largo).length();
//                    espacio = espacio.substring(largo);
//                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Importet
//                    str0 = tablaFactura.getValueAt(r, 8).toString();
//                    str0 = str0.replace(",", ".");
//                    Double calculo = Double.valueOf(str0);
//                    str0 = tablaFactura.getValueAt(r, 8).toString();
//                    str0 = str0.replace(",", ".");
//                    Double calculo = Double.valueOf(str0);
//                    str0 = String.valueOf(calculo);
//                    doble = Double.valueOf(str0);
//                    largo = doble.intValue();
//                    espacio = "      ";
//                    largo = String.valueOf(largo).length();
//                    espacio = espacio.substring(largo);
//                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Impuesto
//                    str0 = tablaFactura.getValueAt(r, 5).toString();
//                    str0 = str0.replace(",", ".");
//                    doble = Double.valueOf(str0);
//                    largo = doble.intValue();
//                    espacio = "       ";
//                    largo = String.valueOf(largo).length();
//                    espacio = espacio.substring(largo);
//                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
//  Total linea
                    pu = r.get(re).getTotal();
                    str0 = df.format(pu).replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[re] = renglones[re] + espacio + df.format(doble) + "  ";
// Sugerido
                    str0 = df.format(r.get(re).getSugerido()).replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[re] = renglones[re] + espacio + df.format(doble) + " ";
                } else {
                    // aqui detalle importes inscripto
// Precio Unitario
                    /*str0 = tablaFactura.getValueAt(r, 3).toString();
                    str0 = str0.replace(",", ".");
                    Double doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Descuento
//                    str0 = tablaFactura.getValueAt(r, 7).toString();
//                    str0 = str0.replace(",", ".");
//                    doble = Double.valueOf(str0);
//                    largo = doble.intValue();
//                    espacio = "     ";
//                    largo = String.valueOf(largo).length();
//                    espacio = espacio.substring(largo);
//                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Gravado
                    str0 = tablaFactura.getValueAt(r, 4).toString();
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Iva
                    str0 = tablaFactura.getValueAt(r, 6).toString();
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "     ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Impuesto
                    str0 = tablaFactura.getValueAt(r, 5).toString();
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "       ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
//  Total linea
                    str0 = tablaFactura.getValueAt(r, 8).toString();
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Sugerido
                    str0 = tablaFactura.getValueAt(r, 9).toString();
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
                     */
                }

            } else {
                // agregar renglon en blanco
                renglones[re] = " ";
            }
        }
        vencCae = sdf.format(i.getFechaCae()); //i.getFechaCae().toString();
// Saldo Cliente
//        String str0 = String.valueOf(saldoCliente - totalFactura);
//        str0 = str0.replace(",", ".");
//        Double doble = Double.valueOf(str0);
//        int largo = doble.intValue();
//        String espacio = "          ";
//        largo = String.valueOf(largo).length();
//        espacio = espacio.substring(largo);
//        totalDeudaFacturaPapel = espacio + df.format(doble);
// Total Factura
        totalFc = i.getTotal();
        String str0 = df.format(totalFc).replace(",", ".");
        Double doble = Double.valueOf(str0);
        int largo = doble.intValue();
        String espacio = "        ";
        largo = String.valueOf(largo).length();
        espacio = espacio.substring(largo);
        importeTotalFacturaPapel = espacio + df.format(doble);
        tpd = i.getCliente().getTipo();
// Linea Totales
        if (categoriaIva != 1) {
//            str0 = String.valueOf(totalImpuesto);
//            str0 = str0.replace(",", ".");
//            doble = Double.valueOf(str0);
//            largo = doble.intValue();
//            espacio = "                                                                            ";
//            largo = String.valueOf(largo).length();
//            espacio = espacio.substring(largo);
//            lineaTotalesFacturaPapel = espacio + df.format(doble);
            lineaTotalesFacturaPapel = espacio;
        } else {
            str0 = String.valueOf(totalGravado);
            str0 = str0.replace(",", ".");
            doble = Double.valueOf(str0);
            largo = doble.intValue();
            espacio = "           ";
            largo = String.valueOf(largo).length();
            espacio = espacio.substring(largo);
            lineaTotalesFacturaPapel = espacio + df.format(doble);
            str0 = String.valueOf(totalImpuesto);
            str0 = str0.replace(",", ".");
            doble = Double.valueOf(str0);
            largo = doble.intValue();
            espacio = "           ";
            largo = String.valueOf(largo).length();
            espacio = espacio.substring(largo);
            lineaTotalesFacturaPapel += espacio + df.format(doble);
            str0 = String.valueOf(totalIva);
            str0 = str0.replace(",", ".");
            doble = Double.valueOf(str0);
            largo = doble.intValue();
            espacio = "                                 ";
            largo = String.valueOf(largo).length();
            espacio = espacio.substring(largo);
            lineaTotalesFacturaPapel += espacio + df.format(doble);
        }
// Total a Pagar
//        Double totalPagar = totalFc;
//        str0 = String.valueOf(totalPagar);
//        str0 = str0.replace(",", ".");
//        doble = Double.valueOf(str0);
//        largo = doble.intValue();
//        espacio = "          ";
//        largo = String.valueOf(largo).length();
//        espacio = espacio.substring(largo);
//        importeTotalFacturaPapel = espacio + df.format(doble);
// Cantidades atados
//        cantidadesFacturaPapel = "                   CANT ATADOS NOBLEZA: " + String.valueOf(cantidadAtadosNobleza);
//        cantidadesFacturaPapel += "              CANT.ATADOS TAB.SARANDI: " + String.valueOf(cantidadAtadosMassalin);
        //                                                                '
//        texto1FacturaPapel = i.get;
//        texto2FacturaPapel = texto2PieFacturaTxt.getText();
//        texto3FacturaPapel = "-";
        texto1Cae = String.valueOf(i.getCae());
        String cuit1 = "00000000000";
        String tipoD = i.getTipoDoc().toString();
        String tipo_cbte = "3";
        String cae = i.getCae().toString();
        String vto = sdf2.format(i.getFechaCae());
        String texto2Cae;
        int x = 0;
        if (tipoD.equals("96")) {
            String s = "0000000000" + cuit1;
            int lar = s.length();
            cuit1 = s.substring(lar - 11, lar);
        }
        Integer suma1 = 0;
        Integer suma2 = 0;
        String cadena = cuit1 + "0" + tipo_cbte + "0006" + cae + vto;
        for (int xi = 0; xi < 39; xi++) {
            if (x == 0) {
                int num = Integer.valueOf(cadena.substring(xi, xi + 1).toString());
                suma1 += num;
                x = 1;
            } else {
                int num = Integer.valueOf(cadena.substring(xi, xi + 1).toString());
                suma2 += num;
                x = 0;
            }
        }
        suma1 = suma1 * 3;
        int total = suma1 + suma2;
        int dv = (int) (rint(total / 10 + .9) * 10);
        dv = dv - total;
        cadena += String.valueOf(dv);
        String txtCadenaRP = "";
        for (int xi = 0; xi < 40; xi = xi + 2) {
            String charNum = cadena.substring(xi, xi + 2);
            int numChar = Integer.valueOf(charNum);
            if (numChar < 50) {
                numChar += 48;
            } else {
                numChar += 142;
            }
            char c = (char) numChar;
            txtCadenaRP = txtCadenaRP + c;
        }
        txtCadenaRP = (char) 40 + txtCadenaRP + (char) 41;
        texto2Cae = txtCadenaRP;

        PrinterJob pj = PrinterJob.getPrinterJob();
        PageFormat pf = pj.defaultPage();
        Paper paper = new Paper();
        double margin = 8;
        paper.setImageableArea(margin, margin, paper.getWidth() - margin * 2, paper.getHeight() - margin * 2);
        pf.setPaper(paper);
        pj.setPrintable(new MyPrintable(), pf);
//        if (pj.printDialog()) {
        try {
            pj.print();
        } catch (PrinterException e) {
            System.out.println(e);
        }
//        }
    }

    private void llenarTabla() {
        try {
            de = sdf.parse(deTxt.getText());
            al = sdf.parse(alTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        facturas = null;
        limpiarTabla();
        if (panifRb.isSelected()) {
            try {
                facturas = new IvaVentasService().getFacturasPanificadosEntreFechas(de, al);
            } catch (Exception ex) {
                Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        } else {
            try {
                facturas = new IvaVentasService().getFacturasCigarrillosEntreFechas(de, al);
            } catch (Exception ex) {
                Logger.getLogger(InformeVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        }
        if (facturas != null && !facturas.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (IvaVentas fc : facturas) {
                Object o[] = new Object[12];
                o[0] = sdf.format(fc.getFecha());
                o[1] = df1.format(fc.getNumeroFactura());
                if (fc.getGravado0() != null) {
                    o[2] = df.format(fc.getGravado0());
                } else {
                    o[2] = df.format(0);
                }
                if (fc.getGravado10_5() != null) {
                    o[3] = df.format(fc.getGravado10_5());
                } else {
                    o[3] = df.format(0);
                }
                o[4] = df.format(fc.getGravado());
                if (fc.getGravado27() != null) {
                    o[5] = df.format(fc.getGravado27());
                } else {
                    o[5] = df.format(0);
                }
                o[6] = df.format(fc.getImpuesto());
                if (fc.getIva0() != null) {
                    o[7] = df.format(fc.getIva0());
                } else {
                    o[7] = df.format(0);
                }
                if (fc.getIva10_5() != null) {
                    o[8] = df.format(fc.getIva10_5());
                } else {
                    o[8] = df.format(0);
                }
                o[9] = df.format(fc.getIva());
                if (fc.getIva27() != null) {
                    o[10] = df.format(fc.getIva27());
                } else {
                    o[10] = df.format(0);
                }
                o[11] = df.format(fc.getTotal());
                if (fc.getGravado0() != null) {
                    totalGravado0 += fc.getGravado0();
                }
                if (fc.getGravado10_5() != null) {
                    totalGravado10_5 += fc.getGravado10_5();
                }
                totalGravado += fc.getGravado();
                if (fc.getGravado27() != null) {
                    totalGravado27 += fc.getGravado27();
                }
                totalImpuesto += fc.getImpuesto();
                if (fc.getIva0() != null) {
                    totalIva0 += fc.getIva0();
                }
                if (fc.getIva10_5() != null) {
                    totalIva10_5 += fc.getIva10_5();
                }
                totalIva += fc.getIva();
                if (fc.getIva27() != null) {
                    totalIva27 += fc.getIva27();
                }
                totalFc += fc.getTotal();
                tbl.addRow(o);
            }
            Object o[] = new Object[12];
            o[0] = "";
            o[1] = "TOTALES";
            o[2] = df.format(totalGravado0);
            o[3] = df.format(totalGravado10_5);
            o[4] = df.format(totalGravado);
            o[5] = df.format(totalGravado27);
            o[6] = df.format(totalImpuesto);
            o[7] = df.format(totalIva0);
            o[8] = df.format(totalIva10_5);
            o[9] = df.format(totalIva);
            o[10] = df.format(totalIva27);
            o[11] = df.format(totalFc);
            tbl.addRow(o);
            tabla.setModel(tbl);
        }
    }

    class MyPrintable implements Printable {

        public int print(Graphics g, PageFormat pf, int pageIndex) {
            if (pageIndex != 0) {
                return NO_SUCH_PAGE;
            }
            Graphics2D g2 = (Graphics2D) g;
            g2.setPaint(Color.black);
            //                1234567890123456789012345678901234567890123456789012345678901234567890
            g2.setFont(new Font("Monospaced", Font.BOLD, 14));
            g2.drawString(letraFacturaPapel, 330, 45);
            g2.setFont(new Font("Monospaced", Font.PLAIN, 6));
            g2.drawString("Cod.: 003", 320, 55);
            g2.setFont(new Font("Monospaced", Font.BOLD, 12));
            g2.drawString(textoFacturaPapel, 388, 45);
            g2.drawString("FADALTI ADRIEL", 50, 45);
            g2.setFont(new Font("Monospaced", Font.PLAIN, 8));
            g2.drawString("CARLOS", 50, 56);
            g2.drawString("NÃºmero: "
                    + sucursalFacturaPapel + " - "
                    + numeroFacturaPapel, 388, 56);
            g2.drawString("RazÃ³n Social: Fadalti Adriel Carlos", 50, 67);
            g2.drawString(fechaFacturaPapel, 388, 67);
            g2.drawString("POTOSI 1566", 50, 78);
            g2.drawString("C.U.I.T.: 23-32956044-9", 388, 78);
            g2.drawString("1678 - CASEROS - Prov. Buenos Aires", 50, 89);
            g2.drawString("Ingresos Brutos Nro: 23-32956044-9", 388, 89);
            g2.drawString(" ", 50, 100);
            g2.drawString("Inicio de Actividad 01/01/2013", 388, 100);
            //         123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
            int row = 120;
            g2.drawString("RazÃ³n Social: " + clienteFacturaPapel, 30, row);
            g2.drawString(codigoClienteFacturaPapel, 480, row);
            row += 15;
            //espacio = "            ";
            g2.drawString("DirecciÃ³n:    " + direccionFacturaPapel, 30, row);
            row += 15;
            if (tpd.equals("96")) {
                g2.drawString("DNI:          " + cuitFacturaPapel, 30, row);
            } else {
                g2.drawString("C.U.I.T.:     " + cuitFacturaPapel, 30, row);
            }
            g2.drawString(inscripcionClienteFacturaPapel, 360, row);
            row += 25;
            g2.drawString("Cond.Venta: " + condicionVentaFacturaPapel, 120, row);
            row += 25;
            g2.drawString(nombresColumnaFacturaPapel, 30, row);
            row += 15;
            for (int x = 0; x < maxNro; x++) {
                if (renglones[x] != null) {
                    g2.drawString(renglones[x], 40, row);
                }
                row += 10;
            }
            row += 40;
            g2.drawString(lineaTotalesFacturaPapel, 40, row);
            g2.setFont(new Font("Monospaced", Font.BOLD, 11));
            g2.drawString(importeTotalFacturaPapel, 490, row);
            g2.setFont(new Font("Monospaced", Font.PLAIN, 9));
            //row += 21;
            //g2.drawString("SALDO ANTERIOR: " + totalDeudaFacturaPapel, 403, row);
            //row += 10;
            //g2.drawString("SALDO TOTAL:    " + totalPagarFacturaPapel, 403, row);
            row += 15;
            //espacio = "     ";
            g2.setFont(new Font("Monospaced", Font.BOLD, 9));
//            g2.drawString(texto1FacturaPapel, 40, row);
//            row += 10;
//            g2.drawString(texto2FacturaPapel, 40, row);
//            row += 10;
//            g2.drawString(texto3FacturaPapel, 40, row);
            g2.setFont(new Font("Monospaced", Font.PLAIN, 9));
            row += 15;
            //g2.drawString(cantidadesFacturaPapel, 30, row);
            row += 15;

            String texto2Cae = "";

            g2.drawString(" CAE " + texto1Cae + "  Venc. CAE " + vencCae, 30, row);
            g2.setFont(new Font("PF Interleavev 2 of 5 Text", Font.PLAIN, 18));
            g2.drawString("           " + texto2Cae, 160, row);
            g2.setFont(new Font("Monospaced", Font.PLAIN, 9));
            return PAGE_EXISTS;
        }
    }
}
