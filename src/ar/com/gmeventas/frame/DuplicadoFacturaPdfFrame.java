/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.gmeventas.frame;

import ar.com.gmeventas.entities.Cliente;
import ar.com.gmeventas.entities.IvaVentas;
import ar.com.gmeventas.entities.RenglonFactura;
import ar.com.gmeventas.main.MainFrame;
import ar.com.gmeventas.services.ClienteService;
import ar.com.gmeventas.services.IvaVentasService;
import ar.com.gmeventas.services.RenglonFacturaService;
import ar.com.gmeventas.util.DesktopApi;
import ar.com.gmeventas.util.PDFBuilder;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.Writer;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.itextpdf.text.DocumentException;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import static java.lang.Math.rint;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class DuplicadoFacturaPdfFrame extends javax.swing.JFrame {

    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
    private static final int qrTamAncho = 150;
    private static final int qrTamAlto = 150;
    private static final String formato = "png";
    private static final String ruta = "c://ventas//qr//codigoQR";
    private static final String extension = ".png";
    private static final SimpleDateFormat sdf_qr = new SimpleDateFormat("yyyy-MM-dd");
    //private final DecimalFormat df_qr = new DecimalFormat("00000000");
    private final DecimalFormat df_matriz = new DecimalFormat("00000000");
    private final String url_qr = "https://www.afip.gob.ar/fe/qr/?p=";
    private final String ver_qr = "1";
    private String fecha_qr;
    private final String cuit_qr = "20339518409";
    private String puntoVenta_qr = "2";
    private String tipoComprobante_qr;
    private String numeroComprobante_qr;
    private String importe_qr;
    private final String moneda_qr = "PES";
    private final String cotiz_qr = "1";
    private String tipoDoc_qr;
    private String numeroDoc_qr;
    private final String tipoCodigoAutoriz_qr = "E";
    private String nroCae_qr;
    private DecimalFormat df = new DecimalFormat("#0.00");
    private final DecimalFormat dfs = new DecimalFormat("0000");
    private final DecimalFormat dfn = new DecimalFormat("00000000");
    private List<IvaVentas> facturas;
    private List<Cliente> clientes;
    private Cliente cliente;
    private IvaVentas fc;

    private String texto1Cae;
    private String vencCae;
    private String texto2Cae;
    private String lineaTotalesFacturaPapel;
    private String importeTotalFacturaPapel;
    private Integer categoriaIva;
    private String[] renglones;
    private Integer maxNro = 41;
    private String nombresColumnaFacturaPapel;
    private String inscripcionClienteFacturaPapel;
    private String cuitFacturaPapel;
    private String direccionFacturaPapel;
    private String codigoClienteFacturaPapel;
    private String fechaFacturaPapel;
    private String numeroFacturaPapel;
    private String sucursalFacturaPapel;
    private String textoFacturaPapel;
    private String letraFacturaPapel;
    private String clienteFacturaPapel;
    private String tpd;

    /**
     * Creates new form DuplicadoFacturaFrame
     */
    public DuplicadoFacturaPdfFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(100, 100, 255));
        this.setLocationRelativeTo(null);
        limpiarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        codigoTxt = new javax.swing.JTextField();
        nombreTxt = new javax.swing.JTextField();
        clienteTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        combo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        imprimirBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        deTxt = new javax.swing.JTextField();
        alTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("IMPRESION DUPLICADOS");

        jLabel1.setText("Código:");

        jLabel2.setText("Razón Social:");

        codigoTxt.setText("CODIGO");
        codigoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoTxtKeyPressed(evt);
            }
        });

        nombreTxt.setText("R-SOCIAL");
        nombreTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombreTxtKeyPressed(evt);
            }
        });

        clienteTxt.setText("NOMBRE");

        jLabel3.setText("Cliente:");

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });
        combo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboKeyPressed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Número", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        imprimirBtn.setText("Imprimir");
        imprimirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Desde:");

        jLabel5.setText("Hasta:");

        deTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deTxt.setText("DESDE");
        deTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deTxtKeyPressed(evt);
            }
        });

        alTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        alTxt.setText("HASTA");
        alTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                alTxtKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clienteTxt)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(imprimirBtn)
                                .addGap(18, 18, 18)
                                .addComponent(volverBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(122, 122, 122)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(volverBtn)
                    .addComponent(imprimirBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void codigoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (codigoTxt.getText().isEmpty()) {
                nombreTxt.requestFocus();
                return;
            }
            buscar();
        }
    }//GEN-LAST:event_codigoTxtKeyPressed

    private void nombreTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreTxtKeyPressed
        System.out.println(evt.getKeyCode());
        if (evt.getKeyCode() == 10) {
            if (nombreTxt.getText().isEmpty()) {
                codigoTxt.requestFocus();
                return;
            }
            buscar();
        }
    }//GEN-LAST:event_nombreTxtKeyPressed

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        if (evt.getModifiers() == 16) {
            int r = combo.getSelectedIndex();
            if (r > 0) {
                cliente = clientes.get(r - 1);
                pedirFecha();
            }
        }
    }//GEN-LAST:event_comboActionPerformed

    private void comboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboKeyPressed
        if (evt.getKeyCode() == 10) {
            int r = combo.getSelectedIndex();
            if (r > 0) {
                cliente = clientes.get(r - 1);
                pedirFecha();
            }
        }
    }//GEN-LAST:event_comboKeyPressed

    private void deTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            desde();
        }
    }//GEN-LAST:event_deTxtKeyPressed

    private void alTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alTxtKeyPressed
        hasta();
    }//GEN-LAST:event_alTxtKeyPressed

    private void imprimirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirBtnActionPerformed
        int row = tabla.getSelectedRow();
        if (row < 0) {
            return;
        }
        IvaVentas iv = facturas.get(row);
        List<RenglonFactura> rf = null;
        try {
            rf = new RenglonFacturaService().getAllRenglonFacturaFromIvaVentas(iv);
        } catch (Exception ex) {
            Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

//        if (rf != null && !rf.isEmpty()) {
            pdf(iv, rf);
//        }
    }//GEN-LAST:event_imprimirBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DuplicadoFacturaPdfFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alTxt;
    private javax.swing.JTextField clienteTxt;
    private javax.swing.JTextField codigoTxt;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JTextField deTxt;
    private javax.swing.JButton imprimirBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nombreTxt;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void buscar() {
        Cliente cl = null;

        System.out.println(!codigoTxt.getText().isEmpty());
        System.out.println(nombreTxt.getText().isEmpty());
        if (!codigoTxt.getText().isEmpty()) {
            try {
                cl = new ClienteService().getClienteByCodigo(codigoTxt.getText());
            } catch (Exception ex) {
                Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            cliente = cl;

            pedirFecha();
        } else {
            String f = nombreTxt.getText();
            clientes = null;
            combo.removeAllItems();
            combo.addItem("");
            try {
                clientes = new ClienteService().getClientesByFiltro(f);
            } catch (Exception ex) {
                Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            if (clientes != null && !clientes.isEmpty()) {
                for (Cliente c : clientes) {
                    combo.addItem(c.getCodigo() + " " + c.getRazonSocial());
                }
                combo.addFocusListener(null);
                combo.showPopup();
                combo.requestFocus();
            }
        }
    }

    private void limpiarCampos() {
        deTxt.setText("");
        alTxt.setText("");
        nombreTxt.setText("");
        codigoTxt.setText("");
        clienteTxt.setText("");
        combo.removeAllItems();
        combo.addItem("");
        limpiarTabla();
    }

    private void limpiarTabla() {
        int rows = tabla.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
            tabla.setModel(tbl);
        }
    }

    private void pedirFecha() {
        clienteTxt.setText(cliente.getRazonSocial());
        deTxt.requestFocus();
    }

    private void desde() {
        if (deTxt.getText().isEmpty()) {
            deTxt.setText(sdf.format(new Date()));
            deTxt.requestFocus();
        } else {
            int largo = deTxt.getText().length();
            if (largo == 2) {
                Calendar cal = Calendar.getInstance();
                int mes = cal.get(Calendar.MONTH) + 1;
                int anio = cal.get(Calendar.YEAR);
                String an = String.valueOf(anio);
                String f = "0" + String.valueOf(mes);
                if (f.length() > 2) {
                    f = f.substring(1, 3);
                }
                f = f + "/" + an;
                deTxt.setText(deTxt.getText() + "/" + f);
                alTxt.requestFocus();
            } else {
                if (largo == 5) {
                    Calendar cal = Calendar.getInstance();
                    int anio = cal.get(Calendar.YEAR);
                    String an = "/" + String.valueOf(anio);
                    deTxt.setText(deTxt.getText() + an);
                    alTxt.requestFocus();
                } else {
                    if (largo != 10) {
                        JOptionPane.showMessageDialog(this, "Error en fecha");
                        deTxt.setText("");
//                          request focus mismo campo
                        deTxt.requestFocus();
                    } else {
                        String veinte = deTxt.getText().substring(6, 8);
                        if (!veinte.equals("20")) {
                            JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                            deTxt.requestFocus();
                        } else {
                            alTxt.requestFocus();
                        }
                    }
                }
            }
        }
    }

    private void hasta() {
        if (alTxt.getText().isEmpty()) {
            alTxt.setText(sdf.format(new Date()));
            alTxt.requestFocus();
        } else {
            int largo = alTxt.getText().length();
            if (largo == 2) {
                Calendar cal = Calendar.getInstance();
                int mes = cal.get(Calendar.MONTH) + 1;
                int anio = cal.get(Calendar.YEAR);
                String an = String.valueOf(anio);
                String f = "0" + String.valueOf(mes);
                if (f.length() > 2) {
                    f = f.substring(1, 3);
                }
                f = f + "/" + an;
                alTxt.setText(alTxt.getText() + "/" + f);
                llenarTabla();
            } else {
                if (largo == 5) {
                    Calendar cal = Calendar.getInstance();
                    int anio = cal.get(Calendar.YEAR);
                    String an = "/" + String.valueOf(anio);
                    alTxt.setText(alTxt.getText() + an);
                    llenarTabla();
                } else {
                    if (largo != 10) {
                        JOptionPane.showMessageDialog(this, "Error en fecha");
                        alTxt.setText("");
//                          request focus mismo campo
                        alTxt.requestFocus();
                    } else {
                        String veinte = alTxt.getText().substring(6, 8);
                        if (!veinte.equals("20")) {
                            JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                            alTxt.requestFocus();
                        } else {
                            llenarTabla();
                        }
                    }
                }
            }
        }
    }

    private void llenarTabla() {
        facturas = null;
        Date f1 = new Date();
        Date f2 = f1;
        try {
            f1 = sdf.parse(deTxt.getText());
            f2 = sdf.parse(alTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
            deTxt.requestFocus();
            return;
        }
        try {
            facturas = new IvaVentasService().getAllIvaVentasByCodigoYFecha(cliente, f1, f2);
        } catch (Exception ex) {
            Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (facturas != null && !facturas.isEmpty()) {
            limpiarTabla();
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (IvaVentas f : facturas) {
                Object o[] = new Object[3];
                o[0] = sdf.format(f.getFecha());
                o[1] = f.getLetra() + " " + dfs.format(f.getNumeroSucursal()) + "-" + dfn.format(f.getNumeroFactura());
                o[2] = df.format(f.getTotal());
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void terminarFactura() {
        renglones = new String[maxNro];
        textoFacturaPapel = "FACTURA";
        fechaFacturaPapel = sdf.format(fc.getFecha());
        clienteFacturaPapel = cliente.getRazonSocial();
        codigoClienteFacturaPapel = cliente.getCodigo();
        direccionFacturaPapel = cliente.getDomicilio().getCalle() + " " + cliente.getDomicilio().getNumero() + " - " + cliente.getDomicilio().getLocalidad();
        cuitFacturaPapel = cliente.getCuit();
//        String condVta = "";
//        Date fechaVto = fc.getFecha();
//        Calendar cal = new GregorianCalendar();
//        cal.setTime(fc.getFecha());
//        if (cliente.getFormaDePago().equals(1)) {
//            condVta = "CONTADO               ";
//        }
//        if (cliente.getFormaDePago().equals(2)) {
//            condVta = "7 DIAS F.F            ";
//            cal.add(Calendar.DATE, 7);
//            fechaVto = cal.getTime();
//        }
//        if (cliente.getFormaDePago().equals(3)) {
//            condVta = "14 DIAS F.F.          ";
//            cal.add(Calendar.DATE, 14);
//            fechaVto = cal.getTime();
//        }
//        if (cliente.getFormaDePago().equals(4)) {
//            condVta = "OTRO                  ";
//            fechaVto = null;
//        }
//        //condicionVentaFacturaPapel = condVta;
//        //vencimientoFacturaPapel = sdf.format(fechaVto);
        categoriaIva = cliente.getCategoriaDeIva();
        String catego = "";
        if (cliente.getCategoriaDeIva().equals(1)) {
            catego = "Responsable Inscripto       ";
        }
        if (cliente.getCategoriaDeIva().equals(2)) {
            catego = "Monotributo                 ";
        }
        if (cliente.getCategoriaDeIva().equals(3)) {
            catego = "Exento                      ";
        }
        if (cliente.getCategoriaDeIva().equals(4)) {
            catego = "Consumidor Final            ";
        }
        inscripcionClienteFacturaPapel = catego;
        if (categoriaIva != 1) {
            //                                    1         2         3         4         5         6         7         8         9        10
            //                           1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
            nombresColumnaFacturaPapel = "  IT CANT                   DETALLE                     P.UNIT.          TOTAL           SUG";
        } else {
            nombresColumnaFacturaPapel = "  IT CANT                   DETALLE                    P.UNIT.   GRAVADO      IVA       IMP.     TOTAL     SUG";
            //mbresColumnaFacturaPapel = "  IT CANT                   DETALLE                     P.UNIT.     DESC.    GRAVADO      IVA       IMP.    TOTAL      SUG";
        }

        List<RenglonFactura> rf = null;
        try {
            rf = new RenglonFacturaService().getAllRenglonFacturaFromIvaVentas(fc);
        } catch (Exception ex) {
            Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        int maxTabla = rf.size();
//        System.out.println(maxTabla);
//        System.exit(0);
        for (int r = 0; r < maxNro; r++) {
            if (r < maxTabla) {
                String str0 = String.valueOf(rf.get(r).getProducto().getCodigo());
                int largo = str0.length();
                if (largo < 2) {
                    renglones[r] = " " + str0 + " ";
                } else {
                    renglones[r] = str0 + " ";
                }

                str0 = String.valueOf(rf.get(r).getCantidad());
                largo = str0.length();
                if (largo == 1) {
                    renglones[r] = renglones[r] + "   " + str0;
                }
                if (largo == 2) {
                    renglones[r] = renglones[r] + "  " + str0;
                }
                if (largo == 3) {
                    renglones[r] = renglones[r] + " " + str0;
                }
                if (largo == 4) {
                    renglones[r] = renglones[r] + str0;
                }
                str0 = rf.get(r).getDescripcion();
                String espacio = " ";
                largo = str0.length();
                if (largo > 42) {
                    str0 = str0.substring(0, 42);
                } else {
                    for (int l = largo; l < 42; l++) {
                        espacio += " ";
                    }
                }
                renglones[r] = renglones[r] + "  " + str0 + espacio;
                if (categoriaIva != 1) {
//                  aqui detalle de importes no inscripto en IVA           *****
// Precio Unitario
                    str0 = df.format(rf.get(r).getTotal() / rf.get(r).getCantidad());
                    str0 = str0.replace(",", ".");
                    Double doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + "      ";
// Descuento
//                    str0 = tablaFactura.getValueAt(r, 7).toString();
//                    str0 = str0.replace(",", ".");
//                    doble = Double.valueOf(str0);
//                    largo = doble.intValue();
//                    espacio = "     ";
//                    largo = String.valueOf(largo).length();
//                    espacio = espacio.substring(largo);
//                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Importet
//                    str0 = tablaFactura.getValueAt(r, 8).toString();
//                    str0 = str0.replace(",", ".");
//                    Double calculo = Double.valueOf(str0);
//                    str0 = tablaFactura.getValueAt(r, 8).toString();
//                    str0 = str0.replace(",", ".");
//                    Double calculo = Double.valueOf(str0);
//                    str0 = String.valueOf(calculo);
//                    doble = Double.valueOf(str0);
//                    largo = doble.intValue();
//                    espacio = "      ";
//                    largo = String.valueOf(largo).length();
//                    espacio = espacio.substring(largo);
//                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Impuesto
//                    str0 = tablaFactura.getValueAt(r, 5).toString();
//                    str0 = str0.replace(",", ".");
//                    doble = Double.valueOf(str0);
//                    largo = doble.intValue();
//                    espacio = "       ";
//                    largo = String.valueOf(largo).length();
//                    espacio = espacio.substring(largo);
//                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
//  Total linea
                    str0 = df.format(rf.get(r).getTotal());
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + "  ";
// Sugerido
                    str0 = df.format(rf.get(r).getSugerido());
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
                } else {
                    // aqui detalle importes inscripto
// Precio Unitario
                    Double grv = rf.get(r).getGravado();
                    if (rf.get(r).getGravado0() != null) {
                        grv = rf.get(r).getGravado0();
                    }
                    if (rf.get(r).getGravado10_5() != null) {
                        grv = rf.get(r).getGravado10_5();
                    }
                    if (rf.get(r).getGravado27() != null) {
                        grv = rf.get(r).getGravado27();
                    }

                    Double ivx = rf.get(r).getIva();
                    if (rf.get(r).getIva0() != null) {
                        ivx = rf.get(r).getIva0();
                    }
                    if (rf.get(r).getIva10_5() != null) {
                        ivx = rf.get(r).getIva10_5();
                    }
                    if (rf.get(r).getIva27() != null) {
                        ivx = rf.get(r).getIva27();
                    }

                    Double pu = grv + ivx + rf.get(r).getImpuesto();
                    str0 = df.format(pu);
                    str0 = str0.replace(",", ".");
                    Double doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Descuento
//                    str0 = tablaFactura.getValueAt(r, 7).toString();
//                    str0 = str0.replace(",", ".");
//                    doble = Double.valueOf(str0);
//                    largo = doble.intValue();
//                    espacio = "     ";
//                    largo = String.valueOf(largo).length();
//                    espacio = espacio.substring(largo);
//                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Gravado
                    str0 = df.format(grv);
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Iva
                    str0 = df.format(ivx);
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "     ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Impuesto
                    str0 = df.format(rf.get(r).getImpuesto());
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "       ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
//  Total linea
                    str0 = df.format(rf.get(r).getTotal());
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Sugerido
                    str0 = df.format(rf.get(r).getSugerido());;
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
                }
            } else {
                // agregar renglon en blanco
                renglones[r] = " ";
            }
        }
// Saldo Cliente
        String str0 = "0.0";//String.valueOf(saldoCliente - totalFactura);
//        str0 = str0.replace(",", ".");
        Double doble = Double.valueOf(str0);
        int largo = doble.intValue();
        String espacio = "          ";
//        largo = String.valueOf(largo).length();
//        espacio = espacio.substring(largo);
//        totalDeudaFacturaPapel = espacio + df.format(doble);
// Total Factura
        str0 = String.valueOf(fc.getTotal());
        str0 = str0.replace(",", ".");
        doble = Double.valueOf(str0);
        largo = doble.intValue();
        espacio = "        ";
        largo = String.valueOf(largo).length();
        espacio = espacio.substring(largo);
        importeTotalFacturaPapel = espacio + df.format(doble);
// Linea Totales
        if (categoriaIva != 1) {
            str0 = String.valueOf(fc.getImpuesto());
            str0 = str0.replace(",", ".");
            doble = Double.valueOf(str0);
            largo = doble.intValue();
            espacio = "                         ";
            largo = String.valueOf(largo).length();
            espacio = espacio.substring(largo);
            lineaTotalesFacturaPapel = espacio + df.format(doble);
//            lineaTotalesFacturaPapel = espacio;
        } else {
            Double grv = fc.getGravado();
            if (fc.getGravado0() != null) {
                grv = fc.getGravado0();
            }
            if (fc.getGravado10_5() != null) {
                grv = fc.getGravado10_5();
            }
            if (fc.getGravado27() != null) {
                grv = fc.getGravado27();
            }

            Double ivx = fc.getIva();
            if (fc.getIva0() != null) {
                ivx = fc.getIva0();
            }
            if (fc.getIva10_5() != null) {
                ivx = fc.getIva10_5();
            }
            if (fc.getIva27() != null) {
                ivx = fc.getIva27();
            }
            str0 = String.valueOf(grv);
            str0 = str0.replace(",", ".");
            doble = Double.valueOf(str0);
            largo = doble.intValue();
            espacio = "           ";
            largo = String.valueOf(largo).length();
            espacio = espacio.substring(largo);
            lineaTotalesFacturaPapel = espacio + df.format(doble);
            str0 = String.valueOf(fc.getImpuesto());
            str0 = str0.replace(",", ".");
            doble = Double.valueOf(str0);
            largo = doble.intValue();
            espacio = "           ";
            largo = String.valueOf(largo).length();
            espacio = espacio.substring(largo);
            lineaTotalesFacturaPapel += espacio + df.format(doble);
            str0 = String.valueOf(ivx);
            str0 = str0.replace(",", ".");
            doble = Double.valueOf(str0);
            largo = doble.intValue();
            espacio = "                                 ";
            largo = String.valueOf(largo).length();
            espacio = espacio.substring(largo);
            lineaTotalesFacturaPapel += espacio + df.format(doble);
        }
// Total a Pagar
        letraFacturaPapel = fc.getLetra();
        numeroFacturaPapel = dfn.format(fc.getNumeroFactura());
        sucursalFacturaPapel = dfs.format(fc.getNumeroSucursal());
        vencCae = sdf.format(fc.getFechaCae());
        Double totalPagar = 0.0;//saldoCliente;
        str0 = String.valueOf(totalPagar);
        str0 = str0.replace(",", ".");
        doble = Double.valueOf(str0);
        largo = doble.intValue();
        espacio = "          ";
        largo = String.valueOf(largo).length();
        espacio = espacio.substring(largo);
        //totalPagarFacturaPapel = espacio + df.format(doble);
// Cantidades atados
        //cantidadesFacturaPapel = "                   CANT ATADOS NOBLEZA: " + String.valueOf(cantidadAtadosNobleza);
        //cantidadesFacturaPapel += "              CANT.ATADOS TAB.SARANDI: " + String.valueOf(cantidadAtadosMassalin);
        //                                                                '
        //texto1FacturaPapel = texto1PieFacturaTxt.getText();
        //texto2FacturaPapel = texto2PieFacturaTxt.getText();
        //texto3FacturaPapel = "-";
        String cui = cliente.getCuit();
        tpd = cliente.getTipo();
        String vto = sdf2.format(fc.getFechaCae());
        String cuit1;
        tpd = "80";
        if (tpd.equals("96")) {
            cuit1 = cui.trim();
            tpd = "96";
        } else {
            cuit1 = cui.substring(0, 2) + cui.substring(3, 11) + cui.substring(12, 13);
        }
        int x = 0;
        if (tpd.equals("96")) {
            String s = "0000000000" + cuit1;
            int lar = s.length();
            cuit1 = s.substring(lar - 11, lar);
        }
        Integer suma1 = 0;
        Integer suma2 = 0;
        String sucu = dfs.format(fc.getNumeroSucursal());
        String cae = fc.getCae().toString();
        String cadena = cuit1 + "0" + tpd + sucu + cae + vto;
        for (int i = 0; i < 39; i++) {
            if (x == 0) {
                int num = Integer.valueOf(cadena.substring(i, i + 1).toString());
                suma1 += num;
                x = 1;
            } else {
                int num = Integer.valueOf(cadena.substring(i, i + 1).toString());
                suma2 += num;
                x = 0;
            }
        }
        suma1 = suma1 * 3;
        int total = suma1 + suma2;
        int dv = (int) (rint(total / 10 + .9) * 10);
        dv = dv - total;
        cadena += String.valueOf(dv);
        String txtCadenaRP = "";
        for (int i = 0; i < 40; i = i + 2) {
            String charNum = cadena.substring(i, i + 2);
            int numChar = Integer.valueOf(charNum);
            if (numChar < 50) {
                numChar += 48;
            } else {
                numChar += 142;
            }
            char c = (char) numChar;
            txtCadenaRP = txtCadenaRP + c;
        }
        txtCadenaRP = (char) 40 + txtCadenaRP + (char) 41;
        texto2Cae = txtCadenaRP;

        texto1Cae = String.valueOf(fc.getCae());

        PrinterJob pj = PrinterJob.getPrinterJob();
        PageFormat pf = pj.defaultPage();
        Paper paper = new Paper();
        double margin = 8;
        paper.setImageableArea(margin, margin, paper.getWidth() - margin * 2, paper.getHeight() - margin * 2);
        pf.setPaper(paper);
        // pj.setPrintable(new DuplicadoFacturaPdfFrame.MyPrintable(), pf);
//        if (pj.printDialog()) {
        try {
            pj.print();
        } catch (PrinterException e) {
            System.out.println(e);
        }
    }

    private void generarQR(String data, String numeroFactura) throws Exception {
        String cadenaCodificada = Base64.getEncoder().encodeToString(data.getBytes());
        BitMatrix matriz;
        Writer writer = new QRCodeWriter();
        try {
            matriz = writer.encode(url_qr + cadenaCodificada, BarcodeFormat.QR_CODE, qrTamAncho, qrTamAlto);
        } catch (WriterException e) {
            e.printStackTrace(System.err);
            JOptionPane.showMessageDialog(this, "ERROR GENERANDO QR");
            return;
        }
        BufferedImage imagen = new BufferedImage(qrTamAncho,
                qrTamAlto, BufferedImage.TYPE_INT_RGB);
        for (int y = 0; y < qrTamAlto; y++) {
            for (int x = 0; x < qrTamAncho; x++) {
                int valor = (matriz.get(x, y) ? 0 : 1) & 0xff;
                imagen.setRGB(x, y, (valor == 0 ? 0 : 0xFFFFFF));
            }
        }
        //99
        FileOutputStream qrCode;
        //String nf_qr = numeroFactura;
        qrCode = new FileOutputStream(ruta + numeroFactura + extension);
        ImageIO.write(imagen, formato, qrCode);
        qrCode.close();

    }

    private void pdf(IvaVentas iv, List<RenglonFactura> rf) {
        String letra = iv.getLetra();
        Integer sucursal = iv.getNumeroSucursal();
        fecha_qr = sdf_qr.format(iv.getFecha());
        String cui = iv.getCliente().getCuit();
        String pri = "";
        String med = "";
        String fin = "";
        int lgo = cui.length();
        if (lgo != 13) {
            cui = "0000000000000" + cui;
            int lgo1 = cui.length();
            fin = cui.substring(lgo1 - 11, lgo1);
        }
        if (lgo > 11) {
            if (cui.equals("00-00000000-0")) {
                pri = "0";
                med = "";
                fin = "";
            } else {
                pri = cui.substring(0, 2);
                med = cui.substring(3, 11);
                fin = cui.substring(12, 13);
            }
        }
        numeroDoc_qr = pri + med + fin;
        puntoVenta_qr = iv.getNumeroSucursal().toString();
        tipoComprobante_qr = iv.getTipoDoc().toString();
        numeroComprobante_qr = iv.getNumeroFactura().toString();
        String nc = df_matriz.format(iv.getNumeroFactura());
        importe_qr = df.format(iv.getTotal()).replace(",", ".");
        tipoDoc_qr = iv.getCliente().getTipo();
        nroCae_qr = iv.getCae().toString();
        String data = "{\"ver\"" + ":" + ver_qr
                + ",\"fecha\"" + ":" + "\"" + fecha_qr + "\""
                + ",\"cuit\"" + ":" + cuit_qr
                + ",\"ptoVta\"" + ":" + puntoVenta_qr
                + ",\"tipoCmp\"" + ":" + tipoComprobante_qr
                + ",\"nroCmp\"" + ":" + numeroComprobante_qr
                + ",\"importe\"" + ":" + importe_qr
                + ",\"moneda\"" + ":\"" + moneda_qr + "\""
                + ",\"ctz\"" + ":" + cotiz_qr
                + ",\"tipoDocRec\"" + ":" + tipoDoc_qr
                + ",\"nroDocRec\"" + ":" + numeroDoc_qr
                + ",\"tipoCodAut\"" + ":\"" + tipoCodigoAutoriz_qr + "\""
                + ",\"codAut\"" + ":" + nroCae_qr + "}";
        try {
            generarQR(data, nc);
        } catch (Exception ex) {
            Logger.getLogger(FacturaWebFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (letra.equals("B")) {
            try {
                File pdf = new PDFBuilder().armarFacturaB(iv, rf);
                DesktopApi.open(pdf);
                JOptionPane.showMessageDialog(this, "PROCESO TERMINADO");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DocumentException ex) {
                Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            if (sucursal.equals("2")) {
                try {
                    File pdf = new PDFBuilder().armarFacturaA(iv, rf);
                    DesktopApi.open(pdf);
                    JOptionPane.showMessageDialog(this, "PROCESO TERMINADO");
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (DocumentException ex) {
                    Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    new PDFBuilder().armarFacturaPanificadosA(iv, rf);
                    JOptionPane.showMessageDialog(this, "PROCESO TERMINADO");
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (DocumentException ex) {
                    Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(DuplicadoFacturaPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
}
